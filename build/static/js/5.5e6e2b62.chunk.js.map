{"version":3,"file":"static/js/5.5e6e2b62.chunk.js","mappings":"sIAwCA,MA4CMA,EAAqB,WAAyD,IAA7BC,EAAiBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACvE,OADwCA,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QAEvC,IAAK,UAED,OAAOG,OAAOC,SAASC,KAE3B,IAAK,SAED,OAAON,EAGX,QAEI,MAAMO,EAAgBH,OAAOC,SAASG,OAGtC,OAFoBJ,OAAOC,SAASI,SAEpBC,SAAS,gBACdH,EAAgB,IAEhBH,OAAOC,SAASC,KAGvC,EAOaK,EAAgBC,IACzB,IAAIC,EAAYD,EAEhB,IAAKC,EAED,IAEI,MAAMC,EAASC,EAAQ,OACjB,SAAEC,EAAQ,UAAEhB,GAAcc,EAAOG,YAAYC,eACnDL,EAAYd,EAAmBiB,EAAUhB,EAC7C,CAAE,MAAOmB,GAELC,QAAQC,KAAK,iGAAuBF,GACpCN,EAAYd,EAAmB,OAAQ,IAC3C,CA1D4BuB,KAChC,IACIlB,OAAOmB,OAAON,YAAYK,EAAS,KACnCF,QAAQI,IAAI,6DAAiBF,EACjC,CAAE,MAAOH,GACLC,QAAQD,MAAM,yEAAmBA,EACrC,GA8DAM,CANoC,CAChCC,OAAQ,WACRC,IAAKd,EACLe,WAAW,IAIfR,QAAQI,IAAI,+EAAoB,CAC5BK,KAAMzB,OAAOC,SAASC,KACtBwB,GAAIjB,EACJG,SAAUJ,EAAc,SAAW,W","sources":["utils/postMessage.ts"],"sourcesContent":["/**\n * postMessage 通信工具（简化版）\n * 适配外部主网页的简化监听逻辑，无需校验 origin\n * \n * 使用示例：\n * \n * // 1. 基本导航 (跳转到某个页面)\n * postNavigate('https://example.com', true);  // 新窗口打开\n * postNavigate('/dashboard');                 // 当前窗口跳转（默认 false）\n * \n * // 2. 发送退出登录通知\n * notifyLogout(); // 自动获取当前页面地址\n * notifyLogout('/login'); // 手动指定跳转到登录页\n * \n * // 3. 发送自定义消息\n * postMessageToParent({\n *   action: 'custom-action',\n *   data: { userId: 123 }\n * });\n * \n * // 4. 快速退出登录\n * logoutAndNotify(); // 自动获取地址 + 发送通知 + 清除数据 + 跳转\n * \n * 注意：现在所有消息都使用 '*' 作为 targetOrigin，\n * 对应外部主网页的简化监听逻辑（不校验来源）\n */\n\nexport interface PostMessageOptions {\n    action: string;\n    url?: string;\n    newWindow?: boolean;\n    [key: string]: any;\n}\n\nexport interface PostMessageConfig {\n    targetOrigins: string[];\n    defaultTargetOrigin?: string;\n}\n\n// 简化配置 - 使用 '*' 作为通用目标\nconst DEFAULT_CONFIG: PostMessageConfig = {\n    targetOrigins: ['*'], // 使用通用目标\n    defaultTargetOrigin: '*'\n};\n\n/**\n * 向父页面发送导航消息（简化版，无需关心 origin）\n * @param url 目标URL\n * @param newWindow 是否在新窗口打开，默认 false\n */\nexport const postNavigate = (url: string, newWindow: boolean = false) => {\n    const message: PostMessageOptions = {\n        action: 'navigate',\n        url: url,\n        newWindow: !!newWindow // 确保是布尔值\n    };\n\n    try {\n        window.parent.postMessage(message, '*'); // 使用 '*' 表示任意目标 origin\n        console.log('[通信] 发送跳转指令:', message);\n    } catch (error) {\n        console.error('[通信] 发送跳转指令失败:', error);\n    }\n};\n\n/**\n * 向父页面发送自定义消息（简化版）\n * @param options 消息选项\n */\nexport const postMessageToParent = (options: PostMessageOptions) => {\n    try {\n        window.parent.postMessage(options, '*');\n        console.log('[通信] 发送自定义消息:', options);\n    } catch (error) {\n        console.error('[通信] 发送自定义消息失败:', error);\n    }\n};\n\n/**\n * 获取退出登录后的目标URL\n * @param strategy 跳转策略\n * @param customUrl 自定义URL\n * @returns 目标URL\n */\nconst getLogoutTargetUrl = (strategy: string = 'auto', customUrl: string = '/') => {\n    switch (strategy) {\n        case 'current':\n            // 跳转到当前完整地址\n            return window.location.href;\n\n        case 'custom':\n            // 使用自定义URL\n            return customUrl;\n\n        case 'auto':\n        default:\n            // 自动策略：用户中心跳转到主域名根路径，其他保持当前地址\n            const currentOrigin = window.location.origin;\n            const currentPath = window.location.pathname;\n\n            if (currentPath.includes('/user-center')) {\n                return currentOrigin + '/';\n            } else {\n                return window.location.href;\n            }\n    }\n};\n\n/**\n * 发送退出登录通知（简化版）\n * 直接发送导航消息让主页面跳转到指定URL\n * @param redirectUrl 退出登录后跳转的URL，如果不提供则根据配置策略自动获取\n */\nexport const notifyLogout = (redirectUrl?: string) => {\n    let targetUrl = redirectUrl;\n\n    if (!targetUrl) {\n        // 如果没有指定URL，使用配置策略\n        try {\n            // 这里使用同步方式获取配置，避免async问题\n            const config = require('../config');\n            const { strategy, customUrl } = config.postMessage.logoutRedirect;\n            targetUrl = getLogoutTargetUrl(strategy, customUrl);\n        } catch (error) {\n            // 如果获取配置失败，使用默认的auto策略\n            console.warn('[通信] 获取配置失败，使用默认策略:', error);\n            targetUrl = getLogoutTargetUrl('auto', '/');\n        }\n    }\n\n    // 发送导航消息，让主页面跳转\n    const message: PostMessageOptions = {\n        action: 'navigate',\n        url: targetUrl,\n        newWindow: false\n    };\n\n    postMessageToParent(message);\n    console.log('[通信] 发送退出登录导航指令:', {\n        from: window.location.href,\n        to: targetUrl,\n        strategy: redirectUrl ? 'manual' : 'config'\n    });\n};\n\n/**\n * 获取当前配置（保留兼容性）\n */\nexport const getPostMessageConfig = (): PostMessageConfig => {\n    return { ...DEFAULT_CONFIG };\n};\n\n/**\n * 快速退出登录并通知父页面（简化版）\n * @param redirectUrl 退出登录后跳转的URL，如果不提供则自动获取当前页面地址\n * @example\n * logoutAndNotify(); // 自动获取当前页面地址\n * logoutAndNotify('/login'); // 跳转到登录页\n */\nexport const logoutAndNotify = async (redirectUrl?: string) => {\n    // 发送退出登录通知\n    notifyLogout(redirectUrl);\n\n    // 等待通知发送完成\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // 清除本地数据\n    localStorage.clear();\n    sessionStorage.clear();\n\n    // 跳转到首页\n    window.location.href = '/';\n}; "],"names":["getLogoutTargetUrl","customUrl","arguments","length","undefined","window","location","href","currentOrigin","origin","pathname","includes","notifyLogout","redirectUrl","targetUrl","config","require","strategy","postMessage","logoutRedirect","error","console","warn","options","parent","log","postMessageToParent","action","url","newWindow","from","to"],"sourceRoot":""}