{"ast":null,"code":"/**\n * Cookie管理工具函数\n */// 获取当前域名信息\nconst getCurrentDomain=()=>{const hostname=window.location.hostname;const parts=hostname.split('.');// 如果是IP地址或localhost，直接返回当前域名\nif(hostname==='localhost'||/^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname)){return{currentDomain:hostname,mainDomain:hostname};}// 获取主域名（最后两个部分，如 yy.com）\nconst mainDomain=parts.length>=2?parts.slice(-2).join('.'):hostname;return{currentDomain:hostname,mainDomain:mainDomain};};// 删除指定域名下的所有cookie\nconst clearCookiesForDomain=domain=>{const cookies=document.cookie.split(';');for(let cookie of cookies){const eqPos=cookie.indexOf('=');const name=eqPos>-1?cookie.substr(0,eqPos).trim():cookie.trim();if(name){// 删除当前路径的cookie\ndocument.cookie=`${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}`;// 删除根路径的cookie\ndocument.cookie=`${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;// 删除不指定domain的cookie\ndocument.cookie=`${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${domain}`;}}};// 退出登录功能\nexport const logout=()=>{const{currentDomain,mainDomain}=getCurrentDomain();// 清除localStorage\nlocalStorage.clear();sessionStorage.clear();// 清除当前域名的cookie\nclearCookiesForDomain(currentDomain);// 如果当前是子域名，也清除主域名的cookie\nif(currentDomain!==mainDomain){clearCookiesForDomain(mainDomain);}// 跳转逻辑\nif(currentDomain!==mainDomain){// 当前是子域名，跳转到主域名\nwindow.location.href=`${window.location.protocol}//${mainDomain}`;}else{// 当前是主域名，跳转到根路径\nwindow.location.href='/';}};// 获取cookie值\nexport const getCookie=name=>{const value=`; ${document.cookie}`;const parts=value.split(`; ${name}=`);if(parts.length===2){var _parts$pop;return((_parts$pop=parts.pop())===null||_parts$pop===void 0?void 0:_parts$pop.split(';').shift())||null;}return null;};// 检查是否已登录\nexport const isAuthenticated=()=>{const xuserid=getCookie('xuserid');const xtoken=getCookie('xtoken');return!!(xuserid&&xtoken);};","map":{"version":3,"names":["getCurrentDomain","hostname","window","location","parts","split","test","currentDomain","mainDomain","length","slice","join","clearCookiesForDomain","domain","cookies","document","cookie","eqPos","indexOf","name","substr","trim","logout","localStorage","clear","sessionStorage","href","protocol","getCookie","value","_parts$pop","pop","shift","isAuthenticated","xuserid","xtoken"],"sources":["/opt/dev/star_share/web/src/utils/cookieUtils.ts"],"sourcesContent":["/**\n * Cookie管理工具函数\n */\n\n// 获取当前域名信息\nconst getCurrentDomain = (): { currentDomain: string; mainDomain: string } => {\n  const hostname = window.location.hostname;\n  const parts = hostname.split('.');\n  \n  // 如果是IP地址或localhost，直接返回当前域名\n  if (hostname === 'localhost' || /^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname)) {\n    return {\n      currentDomain: hostname,\n      mainDomain: hostname\n    };\n  }\n  \n  // 获取主域名（最后两个部分，如 yy.com）\n  const mainDomain = parts.length >= 2 ? parts.slice(-2).join('.') : hostname;\n  \n  return {\n    currentDomain: hostname,\n    mainDomain: mainDomain\n  };\n};\n\n// 删除指定域名下的所有cookie\nconst clearCookiesForDomain = (domain: string): void => {\n  const cookies = document.cookie.split(';');\n  \n  for (let cookie of cookies) {\n    const eqPos = cookie.indexOf('=');\n    const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();\n    \n    if (name) {\n      // 删除当前路径的cookie\n      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}`;\n      // 删除根路径的cookie\n      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n      // 删除不指定domain的cookie\n      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${domain}`;\n    }\n  }\n};\n\n// 退出登录功能\nexport const logout = (): void => {\n  const { currentDomain, mainDomain } = getCurrentDomain();\n  \n  // 清除localStorage\n  localStorage.clear();\n  sessionStorage.clear();\n  \n  // 清除当前域名的cookie\n  clearCookiesForDomain(currentDomain);\n  \n  // 如果当前是子域名，也清除主域名的cookie\n  if (currentDomain !== mainDomain) {\n    clearCookiesForDomain(mainDomain);\n  }\n  \n  // 跳转逻辑\n  if (currentDomain !== mainDomain) {\n    // 当前是子域名，跳转到主域名\n    window.location.href = `${window.location.protocol}//${mainDomain}`;\n  } else {\n    // 当前是主域名，跳转到根路径\n    window.location.href = '/';\n  }\n};\n\n// 获取cookie值\nexport const getCookie = (name: string): string | null => {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) {\n    return parts.pop()?.split(';').shift() || null;\n  }\n  return null;\n};\n\n// 检查是否已登录\nexport const isAuthenticated = (): boolean => {\n  const xuserid = getCookie('xuserid');\n  const xtoken = getCookie('xtoken');\n  return !!(xuserid && xtoken);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}