{"ast":null,"code":"/**\n * Cookie管理工具函数\n */// 获取当前域名信息\nconst getCurrentDomain=()=>{const hostname=window.location.hostname;const parts=hostname.split('.');// 如果是IP地址或localhost，直接返回当前域名\nif(hostname==='localhost'||/^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname)){return{currentDomain:hostname,mainDomain:hostname};}// 获取主域名（最后两个部分，如 yy.com）\nconst mainDomain=parts.length>=2?parts.slice(-2).join('.'):hostname;return{currentDomain:hostname,mainDomain:mainDomain};};// 删除指定域名下的所有cookie\nconst clearCookiesForDomain=domain=>{const cookies=document.cookie.split(';');for(let cookie of cookies){const eqPos=cookie.indexOf('=');const name=eqPos>-1?cookie.substr(0,eqPos).trim():cookie.trim();if(name){// 尝试多种删除方式，确保彻底清除\nconst expireDate='Thu, 01 Jan 1970 00:00:00 GMT';// 1. 删除当前域名，根路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=/`;// 2. 删除当前域名，当前路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=${window.location.pathname}`;// 3. 删除指定域名，根路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=${domain}`;// 4. 删除指定域名前缀点，根路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=.${domain}`;// 5. 删除当前完整域名\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=${window.location.hostname}`;// 6. 删除当前完整域名前缀点\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=.${window.location.hostname}`;// 7. 尝试删除所有可能的路径组合\nconst pathParts=window.location.pathname.split('/').filter(part=>part);let currentPath='';for(const part of pathParts){currentPath+=`/${part}`;document.cookie=`${name}=; expires=${expireDate}; path=${currentPath}`;document.cookie=`${name}=; expires=${expireDate}; path=${currentPath}; domain=${domain}`;document.cookie=`${name}=; expires=${expireDate}; path=${currentPath}; domain=.${domain}`;}}}};// 彻底清除所有相关域名的cookie（简化可靠版）\nconst clearAllRelatedCookies=(currentDomain,mainDomain)=>{try{// 获取所有可能的域名变体\nconst domainsToClean=[currentDomain,mainDomain,window.location.hostname,`.${currentDomain}`,`.${mainDomain}`,`.${window.location.hostname}`];// 去重\nconst uniqueDomains=Array.from(new Set(domainsToClean));// 获取当前所有cookie名称\nconst cookies=document.cookie.split(';');const cookieNames=cookies.map(cookie=>{const name=cookie.split('=')[0].trim();return name;}).filter(name=>name);// 对每个cookie名称，尝试用所有可能的域名和路径组合进行删除\ncookieNames.forEach(cookieName=>{if(cookieName){// 基础删除方式\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;// 针对每个域名进行删除\nuniqueDomains.forEach(domain=>{try{document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; secure`;}catch(e){// 忽略单个删除操作的错误\n}});}});// 额外保险：再次尝试删除常见cookie\nconst commonCookieNames=['xuserid','xtoken','cas_access_token','access_token','refresh_token','user_session','auth_token','session_id','JSESSIONID'];commonCookieNames.forEach(cookieName=>{document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com`;});}catch(error){// 如果批量清理失败，进行基础清理\ntry{const allCookies=document.cookie.split(';');allCookies.forEach(cookie=>{const cookieName=cookie.split('=')[0].trim();if(cookieName){document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;}});}catch(basicError){// 连基础清理都失败了，只能忽略\n}}};// 退出登录功能（强化版）\nexport const logout=async()=>{console.log('🚀 开始执行logout流程');try{const{currentDomain,mainDomain}=getCurrentDomain();console.log('📍 域名信息:',{currentDomain,mainDomain});// 在清除cookie之前先获取cas_access_token\nconst casAccessToken=getCookie('cas_access_token');console.log('🔑 获取到的cas_access_token:',casAccessToken?'存在':'不存在');try{// 动态导入 postMessage 工具（避免循环依赖）\nconsole.log('📞 准备发送postMessage通知');const{notifyLogout}=await import('./postMessage');// 先发送退出登录通知到父页面，自动获取当前页面地址\nnotifyLogout();console.log('✅ postMessage通知发送完成');// 等待一小段时间确保消息发送完成\nawait new Promise(resolve=>setTimeout(resolve,100));}catch(postMessageError){console.warn('⚠️ postMessage发送失败，继续执行清理:',postMessageError);// 不让postMessage错误中断整个流程\n}// 清除localStorage和sessionStorage\nconsole.log('🗑️ 开始清除本地存储');try{localStorage.clear();sessionStorage.clear();console.log('✅ 本地存储清除完成');}catch(storageError){console.error('❌ 本地存储清除失败:',storageError);}// 彻底清除所有相关域名的cookie\nconsole.log('🍪 开始清除cookies');try{console.log('🍪 清除前的cookies:',document.cookie);clearAllRelatedCookies(currentDomain,mainDomain);console.log('🍪 清除后的cookies:',document.cookie);console.log('✅ Cookie清除完成');}catch(cookieError){console.error('❌ Cookie清除失败:',cookieError);}// 确定最终跳转地址\nlet redirectUri;if(currentDomain!==mainDomain){// 当前是子域名，跳转到主域名\nredirectUri=`${window.location.protocol}//${mainDomain}`;}else{// 当前是主域名，跳转到根路径\nredirectUri=`${window.location.protocol}//${currentDomain}/`;}console.log('🔗 重定向URI:',redirectUri);// 构造Casdoor logout URL\nlet casdoorLogoutUrl=`https://casdoor.niceaigc.com/api/logout?post_logout_redirect_uri=${encodeURIComponent(redirectUri)}`;// 如果有cas_access_token，添加id_token_hint参数\nif(casAccessToken){casdoorLogoutUrl+=`&id_token_hint=${encodeURIComponent(casAccessToken)}`;}console.log('🎯 最终跳转URL:',casdoorLogoutUrl);// 强制等待一下，确保所有操作完成\nawait new Promise(resolve=>setTimeout(resolve,200));console.log('🚀 准备跳转到Casdoor');// 跳转到Casdoor logout接口\nwindow.location.href=casdoorLogoutUrl;}catch(error){console.error('❌ logout函数执行失败:',error);// 如果全流程失败，至少执行基础清理\nconsole.log('🛡️ 执行应急清理');try{localStorage.clear();sessionStorage.clear();// 基础cookie清理\nconst cookies=document.cookie.split(';');cookies.forEach(cookie=>{const cookieName=cookie.split('=')[0].trim();if(cookieName){document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;}});console.log('🛡️ 应急清理完成，强制跳转到主页');// 应急跳转\nwindow.location.href='https://niceaigc.com/';}catch(emergencyError){console.error('❌ 应急清理也失败了:',emergencyError);// 最后的手段\nalert('退出登录时发生错误，请手动清除浏览器缓存或刷新页面');}}};// 获取cookie值\nexport const getCookie=name=>{const value=`; ${document.cookie}`;const parts=value.split(`; ${name}=`);if(parts.length===2){var _parts$pop;return((_parts$pop=parts.pop())===null||_parts$pop===void 0?void 0:_parts$pop.split(';').shift())||null;}return null;};// 检查是否已登录\nexport const isAuthenticated=()=>{const xuserid=getCookie('xuserid');const xtoken=getCookie('xtoken');return!!(xuserid&&xtoken);};","map":{"version":3,"names":["getCurrentDomain","hostname","window","location","parts","split","test","currentDomain","mainDomain","length","slice","join","clearCookiesForDomain","domain","cookies","document","cookie","eqPos","indexOf","name","substr","trim","expireDate","pathname","pathParts","filter","part","currentPath","clearAllRelatedCookies","domainsToClean","uniqueDomains","Array","from","Set","cookieNames","map","forEach","cookieName","e","commonCookieNames","error","allCookies","basicError","logout","console","log","casAccessToken","getCookie","notifyLogout","Promise","resolve","setTimeout","postMessageError","warn","localStorage","clear","sessionStorage","storageError","cookieError","redirectUri","protocol","casdoorLogoutUrl","encodeURIComponent","href","emergencyError","alert","value","_parts$pop","pop","shift","isAuthenticated","xuserid","xtoken"],"sources":["/opt/dev/star_share/web/src/utils/cookieUtils.ts"],"sourcesContent":["/**\n * Cookie管理工具函数\n */\n\n// 获取当前域名信息\nconst getCurrentDomain = (): { currentDomain: string; mainDomain: string } => {\n  const hostname = window.location.hostname;\n  const parts = hostname.split('.');\n\n  // 如果是IP地址或localhost，直接返回当前域名\n  if (hostname === 'localhost' || /^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname)) {\n    return {\n      currentDomain: hostname,\n      mainDomain: hostname\n    };\n  }\n\n  // 获取主域名（最后两个部分，如 yy.com）\n  const mainDomain = parts.length >= 2 ? parts.slice(-2).join('.') : hostname;\n\n  return {\n    currentDomain: hostname,\n    mainDomain: mainDomain\n  };\n};\n\n// 删除指定域名下的所有cookie\nconst clearCookiesForDomain = (domain: string): void => {\n  const cookies = document.cookie.split(';');\n\n  for (let cookie of cookies) {\n    const eqPos = cookie.indexOf('=');\n    const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();\n\n    if (name) {\n      // 尝试多种删除方式，确保彻底清除\n      const expireDate = 'Thu, 01 Jan 1970 00:00:00 GMT';\n\n      // 1. 删除当前域名，根路径\n      document.cookie = `${name}=; expires=${expireDate}; path=/`;\n\n      // 2. 删除当前域名，当前路径\n      document.cookie = `${name}=; expires=${expireDate}; path=${window.location.pathname}`;\n\n      // 3. 删除指定域名，根路径\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=${domain}`;\n\n      // 4. 删除指定域名前缀点，根路径\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=.${domain}`;\n\n      // 5. 删除当前完整域名\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=${window.location.hostname}`;\n\n      // 6. 删除当前完整域名前缀点\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=.${window.location.hostname}`;\n\n      // 7. 尝试删除所有可能的路径组合\n      const pathParts = window.location.pathname.split('/').filter(part => part);\n      let currentPath = '';\n      for (const part of pathParts) {\n        currentPath += `/${part}`;\n        document.cookie = `${name}=; expires=${expireDate}; path=${currentPath}`;\n        document.cookie = `${name}=; expires=${expireDate}; path=${currentPath}; domain=${domain}`;\n        document.cookie = `${name}=; expires=${expireDate}; path=${currentPath}; domain=.${domain}`;\n      }\n    }\n  }\n};\n\n// 彻底清除所有相关域名的cookie（简化可靠版）\nconst clearAllRelatedCookies = (currentDomain: string, mainDomain: string): void => {\n  try {\n    // 获取所有可能的域名变体\n    const domainsToClean = [\n      currentDomain,\n      mainDomain,\n      window.location.hostname,\n      `.${currentDomain}`,\n      `.${mainDomain}`,\n      `.${window.location.hostname}`\n    ];\n\n    // 去重\n    const uniqueDomains = Array.from(new Set(domainsToClean));\n\n    // 获取当前所有cookie名称\n    const cookies = document.cookie.split(';');\n    const cookieNames = cookies.map(cookie => {\n      const name = cookie.split('=')[0].trim();\n      return name;\n    }).filter(name => name);\n\n    // 对每个cookie名称，尝试用所有可能的域名和路径组合进行删除\n    cookieNames.forEach(cookieName => {\n      if (cookieName) {\n        // 基础删除方式\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n\n        // 针对每个域名进行删除\n        uniqueDomains.forEach(domain => {\n          try {\n            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}`;\n            document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; secure`;\n          } catch (e) {\n            // 忽略单个删除操作的错误\n          }\n        });\n      }\n    });\n\n    // 额外保险：再次尝试删除常见cookie\n    const commonCookieNames = [\n      'xuserid', 'xtoken', 'cas_access_token', 'access_token', 'refresh_token',\n      'user_session', 'auth_token', 'session_id', 'JSESSIONID'\n    ];\n\n    commonCookieNames.forEach(cookieName => {\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com`;\n    });\n\n  } catch (error) {\n    // 如果批量清理失败，进行基础清理\n    try {\n      const allCookies = document.cookie.split(';');\n      allCookies.forEach(cookie => {\n        const cookieName = cookie.split('=')[0].trim();\n        if (cookieName) {\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n        }\n      });\n    } catch (basicError) {\n      // 连基础清理都失败了，只能忽略\n    }\n  }\n};\n\n// 退出登录功能（强化版）\nexport const logout = async (): Promise<void> => {\n  console.log('🚀 开始执行logout流程');\n\n  try {\n    const { currentDomain, mainDomain } = getCurrentDomain();\n    console.log('📍 域名信息:', { currentDomain, mainDomain });\n\n    // 在清除cookie之前先获取cas_access_token\n    const casAccessToken = getCookie('cas_access_token');\n    console.log('🔑 获取到的cas_access_token:', casAccessToken ? '存在' : '不存在');\n\n    try {\n      // 动态导入 postMessage 工具（避免循环依赖）\n      console.log('📞 准备发送postMessage通知');\n      const { notifyLogout } = await import('./postMessage');\n\n      // 先发送退出登录通知到父页面，自动获取当前页面地址\n      notifyLogout();\n      console.log('✅ postMessage通知发送完成');\n\n      // 等待一小段时间确保消息发送完成\n      await new Promise(resolve => setTimeout(resolve, 100));\n    } catch (postMessageError) {\n      console.warn('⚠️ postMessage发送失败，继续执行清理:', postMessageError);\n      // 不让postMessage错误中断整个流程\n    }\n\n    // 清除localStorage和sessionStorage\n    console.log('🗑️ 开始清除本地存储');\n    try {\n      localStorage.clear();\n      sessionStorage.clear();\n      console.log('✅ 本地存储清除完成');\n    } catch (storageError) {\n      console.error('❌ 本地存储清除失败:', storageError);\n    }\n\n    // 彻底清除所有相关域名的cookie\n    console.log('🍪 开始清除cookies');\n    try {\n      console.log('🍪 清除前的cookies:', document.cookie);\n      clearAllRelatedCookies(currentDomain, mainDomain);\n      console.log('🍪 清除后的cookies:', document.cookie);\n      console.log('✅ Cookie清除完成');\n    } catch (cookieError) {\n      console.error('❌ Cookie清除失败:', cookieError);\n    }\n\n    // 确定最终跳转地址\n    let redirectUri: string;\n    if (currentDomain !== mainDomain) {\n      // 当前是子域名，跳转到主域名\n      redirectUri = `${window.location.protocol}//${mainDomain}`;\n    } else {\n      // 当前是主域名，跳转到根路径\n      redirectUri = `${window.location.protocol}//${currentDomain}/`;\n    }\n    console.log('🔗 重定向URI:', redirectUri);\n\n    // 构造Casdoor logout URL\n    let casdoorLogoutUrl = `https://casdoor.niceaigc.com/api/logout?post_logout_redirect_uri=${encodeURIComponent(redirectUri)}`;\n\n    // 如果有cas_access_token，添加id_token_hint参数\n    if (casAccessToken) {\n      casdoorLogoutUrl += `&id_token_hint=${encodeURIComponent(casAccessToken)}`;\n    }\n\n    console.log('🎯 最终跳转URL:', casdoorLogoutUrl);\n\n    // 强制等待一下，确保所有操作完成\n    await new Promise(resolve => setTimeout(resolve, 200));\n\n    console.log('🚀 准备跳转到Casdoor');\n    // 跳转到Casdoor logout接口\n    window.location.href = casdoorLogoutUrl;\n\n  } catch (error) {\n    console.error('❌ logout函数执行失败:', error);\n\n    // 如果全流程失败，至少执行基础清理\n    console.log('🛡️ 执行应急清理');\n    try {\n      localStorage.clear();\n      sessionStorage.clear();\n\n      // 基础cookie清理\n      const cookies = document.cookie.split(';');\n      cookies.forEach(cookie => {\n        const cookieName = cookie.split('=')[0].trim();\n        if (cookieName) {\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;\n        }\n      });\n\n      console.log('🛡️ 应急清理完成，强制跳转到主页');\n      // 应急跳转\n      window.location.href = 'https://niceaigc.com/';\n    } catch (emergencyError) {\n      console.error('❌ 应急清理也失败了:', emergencyError);\n      // 最后的手段\n      alert('退出登录时发生错误，请手动清除浏览器缓存或刷新页面');\n    }\n  }\n};\n\n// 获取cookie值\nexport const getCookie = (name: string): string | null => {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) {\n    return parts.pop()?.split(';').shift() || null;\n  }\n  return null;\n};\n\n// 检查是否已登录\nexport const isAuthenticated = (): boolean => {\n  const xuserid = getCookie('xuserid');\n  const xtoken = getCookie('xtoken');\n  return !!(xuserid && xtoken);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}