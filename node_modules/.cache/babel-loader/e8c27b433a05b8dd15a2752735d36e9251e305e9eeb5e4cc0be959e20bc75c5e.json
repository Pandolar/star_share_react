{"ast":null,"code":"import { menuData as $fc79756100351201$export$6f49b4016bfc8d56 } from \"./utils.mjs\";\nimport { useRouter as $7Kjv5$useRouter, useSlotId as $7Kjv5$useSlotId, handleLinkClick as $7Kjv5$handleLinkClick, filterDOMProps as $7Kjv5$filterDOMProps, useLinkProps as $7Kjv5$useLinkProps, mergeProps as $7Kjv5$mergeProps } from \"@react-aria/utils\";\nimport { getItemCount as $7Kjv5$getItemCount } from \"@react-stately/collections\";\nimport { usePress as $7Kjv5$usePress, useHover as $7Kjv5$useHover, isFocusVisible as $7Kjv5$isFocusVisible, useKeyboard as $7Kjv5$useKeyboard, useFocus as $7Kjv5$useFocus } from \"@react-aria/interactions\";\nimport { useRef as $7Kjv5$useRef } from \"react\";\nimport { useSelectableItem as $7Kjv5$useSelectableItem } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $a2e5df62f93c7633$export$9d32628fc2aea7da(props, state, ref) {\n  let {\n    id: id,\n    key: key,\n    closeOnSelect: closeOnSelect,\n    isVirtualized: isVirtualized,\n    'aria-haspopup': hasPopup,\n    onPressStart: pressStartProp,\n    onPressUp: pressUpProp,\n    onPress: onPress,\n    onPressChange: pressChangeProp,\n    onPressEnd: onPressEnd,\n    onClick: onClickProp,\n    onHoverStart: hoverStartProp,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onFocus: onFocus,\n    onFocusChange: onFocusChange,\n    onBlur: onBlur,\n    selectionManager = state.selectionManager\n  } = props;\n  let isTrigger = !!hasPopup;\n  let isTriggerExpanded = isTrigger && props['aria-expanded'] === 'true';\n  var _props_isDisabled;\n  let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : selectionManager.isDisabled(key);\n  var _props_isSelected;\n  let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : selectionManager.isSelected(key);\n  let data = (0, $fc79756100351201$export$6f49b4016bfc8d56).get(state);\n  let item = state.collection.getItem(key);\n  let onClose = props.onClose || data.onClose;\n  let router = (0, $7Kjv5$useRouter)();\n  let performAction = () => {\n    var _item_props;\n    if (isTrigger) return;\n    if (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.onAction) item.props.onAction();else if (props.onAction) props.onAction(key);\n    if (data.onAction) {\n      // Must reassign to variable otherwise `this` binding gets messed up. Something to do with WeakMap.\n      let onAction = data.onAction;\n      onAction(key);\n    }\n  };\n  let role = 'menuitem';\n  if (!isTrigger) {\n    if (selectionManager.selectionMode === 'single') role = 'menuitemradio';else if (selectionManager.selectionMode === 'multiple') role = 'menuitemcheckbox';\n  }\n  let labelId = (0, $7Kjv5$useSlotId)();\n  let descriptionId = (0, $7Kjv5$useSlotId)();\n  let keyboardId = (0, $7Kjv5$useSlotId)();\n  let ariaProps = {\n    id: id,\n    'aria-disabled': isDisabled || undefined,\n    role: role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined,\n    'aria-controls': props['aria-controls'],\n    'aria-haspopup': hasPopup,\n    'aria-expanded': props['aria-expanded']\n  };\n  if (selectionManager.selectionMode !== 'none' && !isTrigger) ariaProps['aria-checked'] = isSelected;\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = item === null || item === void 0 ? void 0 : item.index;\n    ariaProps['aria-setsize'] = (0, $7Kjv5$getItemCount)(state.collection);\n  }\n  let onPressStart = e => {\n    // Trigger native click event on keydown unless this is a link (the browser will trigger onClick then).\n    if (e.pointerType === 'keyboard' && !selectionManager.isLink(key)) e.target.click();\n    pressStartProp === null || pressStartProp === void 0 ? void 0 : pressStartProp(e);\n  };\n  let isPressedRef = (0, $7Kjv5$useRef)(false);\n  let onPressChange = isPressed => {\n    pressChangeProp === null || pressChangeProp === void 0 ? void 0 : pressChangeProp(isPressed);\n    isPressedRef.current = isPressed;\n  };\n  let onPressUp = e => {\n    // If interacting with mouse, allow the user to mouse down on the trigger button,\n    // drag, and release over an item (matching native behavior).\n    if (e.pointerType === 'mouse') {\n      if (!isPressedRef.current) e.target.click();\n    }\n    // Pressing a menu item should close by default in single selection mode but not multiple\n    // selection mode, except if overridden by the closeOnSelect prop.\n    if (e.pointerType !== 'keyboard' && !isTrigger && onClose && (closeOnSelect !== null && closeOnSelect !== void 0 ? closeOnSelect : selectionManager.selectionMode !== 'multiple' || selectionManager.isLink(key))) onClose();\n    pressUpProp === null || pressUpProp === void 0 ? void 0 : pressUpProp(e);\n  };\n  let onClick = e => {\n    onClickProp === null || onClickProp === void 0 ? void 0 : onClickProp(e);\n    performAction();\n    (0, $7Kjv5$handleLinkClick)(e, router, item.props.href, item === null || item === void 0 ? void 0 : item.props.routerOptions);\n  };\n  let {\n    itemProps: itemProps,\n    isFocused: isFocused\n  } = (0, $7Kjv5$useSelectableItem)({\n    id: id,\n    selectionManager: selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: true,\n    allowsDifferentPressOrigin: true,\n    // Disable all handling of links in useSelectable item\n    // because we handle it ourselves. The behavior of menus\n    // is slightly different from other collections because\n    // actions are performed on key down rather than key up.\n    linkBehavior: 'none',\n    shouldUseVirtualFocus: data.shouldUseVirtualFocus\n  });\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $7Kjv5$usePress)({\n    onPressStart: onPressStart,\n    onPress: onPress,\n    onPressUp: onPressUp,\n    onPressChange: onPressChange,\n    onPressEnd: onPressEnd,\n    isDisabled: isDisabled\n  });\n  let {\n    hoverProps: hoverProps\n  } = (0, $7Kjv5$useHover)({\n    isDisabled: isDisabled,\n    onHoverStart(e) {\n      // Hovering over an already expanded sub dialog trigger should keep focus in the dialog.\n      if (!(0, $7Kjv5$isFocusVisible)() && !(isTriggerExpanded && hasPopup)) {\n        selectionManager.setFocused(true);\n        selectionManager.setFocusedKey(key);\n      }\n      hoverStartProp === null || hoverStartProp === void 0 ? void 0 : hoverStartProp(e);\n    },\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd\n  });\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $7Kjv5$useKeyboard)({\n    onKeyDown: e => {\n      // Ignore repeating events, which may have started on the menu trigger before moving\n      // focus to the menu item. We want to wait for a second complete key press sequence.\n      if (e.repeat) {\n        e.continuePropagation();\n        return;\n      }\n      switch (e.key) {\n        case ' ':\n          if (!isDisabled && selectionManager.selectionMode === 'none' && !isTrigger && closeOnSelect !== false && onClose) onClose();\n          break;\n        case 'Enter':\n          // The Enter key should always close on select, except if overridden.\n          if (!isDisabled && closeOnSelect !== false && !isTrigger && onClose) onClose();\n          break;\n        default:\n          if (!isTrigger) e.continuePropagation();\n          onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);\n          break;\n      }\n    },\n    onKeyUp: onKeyUp\n  });\n  let {\n    focusProps: focusProps\n  } = (0, $7Kjv5$useFocus)({\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onFocusChange: onFocusChange\n  });\n  let domProps = (0, $7Kjv5$filterDOMProps)(item === null || item === void 0 ? void 0 : item.props);\n  delete domProps.id;\n  let linkProps = (0, $7Kjv5$useLinkProps)(item === null || item === void 0 ? void 0 : item.props);\n  return {\n    menuItemProps: {\n      ...ariaProps,\n      ...(0, $7Kjv5$mergeProps)(domProps, linkProps, isTrigger ? {\n        onFocus: itemProps.onFocus,\n        'data-collection': itemProps['data-collection'],\n        'data-key': itemProps['data-key']\n      } : itemProps, pressProps, hoverProps, keyboardProps, focusProps,\n      // Prevent DOM focus from moving on mouse down when using virtual focus or this is a submenu/subdialog trigger.\n      data.shouldUseVirtualFocus || isTrigger ? {\n        onMouseDown: e => e.preventDefault()\n      } : undefined, isDisabled ? undefined : {\n        onClick: onClick\n      }),\n      // If a submenu is expanded, set the tabIndex to -1 so that shift tabbing goes out of the menu instead of the parent menu item.\n      tabIndex: itemProps.tabIndex != null && isTriggerExpanded && !data.shouldUseVirtualFocus ? -1 : itemProps.tabIndex\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    },\n    isFocused: isFocused,\n    isFocusVisible: isFocused && selectionManager.isFocused && (0, $7Kjv5$isFocusVisible)() && !isTriggerExpanded,\n    isSelected: isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled\n  };\n}\nexport { $a2e5df62f93c7633$export$9d32628fc2aea7da as useMenuItem };","map":{"version":3,"names":["$a2e5df62f93c7633$export$9d32628fc2aea7da","props","state","ref","id","key","closeOnSelect","isVirtualized","hasPopup","onPressStart","pressStartProp","onPressUp","pressUpProp","onPress","onPressChange","pressChangeProp","onPressEnd","onClick","onClickProp","onHoverStart","hoverStartProp","onHoverChange","onHoverEnd","onKeyDown","onKeyUp","onFocus","onFocusChange","onBlur","selectionManager","isTrigger","isTriggerExpanded","_props_isDisabled","isDisabled","_props_isSelected","isSelected","data","$fc79756100351201$export$6f49b4016bfc8d56","get","item","collection","getItem","onClose","router","$7Kjv5$useRouter","performAction","_item_props","onAction","role","selectionMode","labelId","$7Kjv5$useSlotId","descriptionId","keyboardId","ariaProps","undefined","filter","Boolean","join","index","$7Kjv5$getItemCount","e","pointerType","isLink","target","click","isPressedRef","$7Kjv5$useRef","isPressed","current","$7Kjv5$handleLinkClick","href","routerOptions","itemProps","isFocused","$7Kjv5$useSelectableItem","shouldSelectOnPressUp","allowsDifferentPressOrigin","linkBehavior","shouldUseVirtualFocus","pressProps","$7Kjv5$usePress","hoverProps","$7Kjv5$useHover","$7Kjv5$isFocusVisible","setFocused","setFocusedKey","keyboardProps","$7Kjv5$useKeyboard","repeat","continuePropagation","focusProps","$7Kjv5$useFocus","domProps","$7Kjv5$filterDOMProps","linkProps","$7Kjv5$useLinkProps","menuItemProps","$7Kjv5$mergeProps","onMouseDown","preventDefault","tabIndex","labelProps","descriptionProps","keyboardShortcutProps","isFocusVisible"],"sources":["/opt/dev/star_share/web/node_modules/.pnpm/@react-aria+menu@3.19.0_react-dom@19.1.0_react@19.1.0/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/src/useMenuItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, DOMProps, FocusableElement, FocusEvents, HoverEvents, Key, KeyboardEvents, PressEvent, PressEvents, RefObject} from '@react-types/shared';\nimport {filterDOMProps, handleLinkClick, mergeProps, useLinkProps, useRouter, useSlotId} from '@react-aria/utils';\nimport {getItemCount} from '@react-stately/collections';\nimport {isFocusVisible, useFocus, useHover, useKeyboard, usePress} from '@react-aria/interactions';\nimport {menuData} from './utils';\nimport {MouseEvent, useRef} from 'react';\nimport {SelectionManager} from '@react-stately/selection';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableItem} from '@react-aria/selection';\n\nexport interface MenuItemAria {\n  /** Props for the menu item element. */\n  menuItemProps: DOMAttributes,\n\n  /** Props for the main text element inside the menu item. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the menu item, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Props for the keyboard shortcut text element inside the item, if any. */\n  keyboardShortcutProps: DOMAttributes,\n\n  /** Whether the item is currently focused. */\n  isFocused: boolean,\n  /** Whether the item is keyboard focused. */\n  isFocusVisible: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is disabled. */\n  isDisabled: boolean\n}\n\nexport interface AriaMenuItemProps extends DOMProps, PressEvents, HoverEvents, KeyboardEvents, FocusEvents  {\n  /**\n   * Whether the menu item is disabled.\n   * @deprecated - pass disabledKeys to useTreeState instead.\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the menu item is selected.\n   * @deprecated - pass selectedKeys to useTreeState instead.\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the menu item. */\n  'aria-label'?: string,\n\n  /** The unique key for the menu item. */\n  key: Key,\n\n  /**\n   * Handler that is called when the menu should close after selecting an item.\n   * @deprecated - pass to the menu instead.\n   */\n  onClose?: () => void,\n\n  /**\n   * Whether the menu should close when the menu item is selected.\n   * @default true\n   */\n  closeOnSelect?: boolean,\n\n  /** Whether the menu item is contained in a virtual scrolling menu. */\n  isVirtualized?: boolean,\n\n  /**\n   * Handler that is called when the user activates the item.\n   * @deprecated - pass to the menu instead.\n   */\n  onAction?: (key: Key) => void,\n\n  /** What kind of popup the item opens. */\n  'aria-haspopup'?: 'menu' | 'dialog',\n\n  /** Indicates whether the menu item's popup element is expanded or collapsed. */\n  'aria-expanded'?: boolean | 'true' | 'false',\n\n  /** Identifies the menu item's popup element whose contents or presence is controlled by the menu item. */\n  'aria-controls'?: string,\n\n  /** Override of the selection manager. By default, `state.selectionManager` is used. */\n  selectionManager?: SelectionManager\n}\n\n/**\n * Provides the behavior and accessibility implementation for an item in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the item.\n * @param state - State for the menu, as returned by `useTreeState`.\n */\nexport function useMenuItem<T>(props: AriaMenuItemProps, state: TreeState<T>, ref: RefObject<FocusableElement | null>): MenuItemAria {\n  let {\n    id,\n    key,\n    closeOnSelect,\n    isVirtualized,\n    'aria-haspopup': hasPopup,\n    onPressStart: pressStartProp,\n    onPressUp: pressUpProp,\n    onPress,\n    onPressChange: pressChangeProp,\n    onPressEnd,\n    onClick: onClickProp,\n    onHoverStart: hoverStartProp,\n    onHoverChange,\n    onHoverEnd,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onFocusChange,\n    onBlur,\n    selectionManager = state.selectionManager\n  } = props;\n\n  let isTrigger = !!hasPopup;\n  let isTriggerExpanded = isTrigger && props['aria-expanded'] === 'true';\n  let isDisabled = props.isDisabled ?? selectionManager.isDisabled(key);\n  let isSelected = props.isSelected ?? selectionManager.isSelected(key);\n  let data = menuData.get(state)!;\n  let item = state.collection.getItem(key);\n  let onClose = props.onClose || data.onClose;\n  let router = useRouter();\n  let performAction = () => {\n    if (isTrigger) {\n      return;\n    }\n\n    if (item?.props?.onAction) {\n      item.props.onAction();\n    } else if (props.onAction) {\n      props.onAction(key);\n    }\n\n    if (data.onAction) {\n      // Must reassign to variable otherwise `this` binding gets messed up. Something to do with WeakMap.\n      let onAction = data.onAction;\n      onAction(key);\n    }\n  };\n\n  let role = 'menuitem';\n  if (!isTrigger) {\n    if (selectionManager.selectionMode === 'single') {\n      role = 'menuitemradio';\n    } else if (selectionManager.selectionMode === 'multiple') {\n      role = 'menuitemcheckbox';\n    }\n  }\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let keyboardId = useSlotId();\n\n  let ariaProps = {\n    id,\n    'aria-disabled': isDisabled || undefined,\n    role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined,\n    'aria-controls': props['aria-controls'],\n    'aria-haspopup': hasPopup,\n    'aria-expanded': props['aria-expanded']\n  };\n\n  if (selectionManager.selectionMode !== 'none' && !isTrigger) {\n    ariaProps['aria-checked'] = isSelected;\n  }\n\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = item?.index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let onPressStart = (e: PressEvent) => {\n    // Trigger native click event on keydown unless this is a link (the browser will trigger onClick then).\n    if (e.pointerType === 'keyboard' && !selectionManager.isLink(key)) {\n      (e.target as HTMLElement).click();\n    }\n\n    pressStartProp?.(e);\n  };\n  let isPressedRef = useRef(false);\n  let onPressChange = (isPressed: boolean) => {\n    pressChangeProp?.(isPressed);\n    isPressedRef.current = isPressed;\n  };\n\n  let onPressUp = (e: PressEvent) => {\n    // If interacting with mouse, allow the user to mouse down on the trigger button,\n    // drag, and release over an item (matching native behavior).\n    if (e.pointerType === 'mouse') {\n      if (!isPressedRef.current) {\n        (e.target as HTMLElement).click();\n      }\n    }\n\n    // Pressing a menu item should close by default in single selection mode but not multiple\n    // selection mode, except if overridden by the closeOnSelect prop.\n    if (e.pointerType !== 'keyboard' && !isTrigger && onClose && (closeOnSelect ?? (selectionManager.selectionMode !== 'multiple' || selectionManager.isLink(key)))) {\n      onClose();\n    }\n\n    pressUpProp?.(e);\n  };\n\n  let onClick = (e: MouseEvent<FocusableElement>) => {\n    onClickProp?.(e);\n    performAction();\n    handleLinkClick(e, router, item!.props.href, item?.props.routerOptions);\n  };\n\n  let {itemProps, isFocused} = useSelectableItem({\n    id,\n    selectionManager: selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp: true,\n    allowsDifferentPressOrigin: true,\n    // Disable all handling of links in useSelectable item\n    // because we handle it ourselves. The behavior of menus\n    // is slightly different from other collections because\n    // actions are performed on key down rather than key up.\n    linkBehavior: 'none',\n    shouldUseVirtualFocus: data.shouldUseVirtualFocus\n  });\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPress,\n    onPressUp,\n    onPressChange,\n    onPressEnd,\n    isDisabled\n  });\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart(e) {\n      // Hovering over an already expanded sub dialog trigger should keep focus in the dialog.\n      if (!isFocusVisible() && !(isTriggerExpanded && hasPopup)) {\n        selectionManager.setFocused(true);\n        selectionManager.setFocusedKey(key);\n      }\n      hoverStartProp?.(e);\n    },\n    onHoverChange,\n    onHoverEnd\n  });\n\n  let {keyboardProps} = useKeyboard({\n    onKeyDown: (e) => {\n      // Ignore repeating events, which may have started on the menu trigger before moving\n      // focus to the menu item. We want to wait for a second complete key press sequence.\n      if (e.repeat) {\n        e.continuePropagation();\n        return;\n      }\n\n      switch (e.key) {\n        case ' ':\n          if (!isDisabled && selectionManager.selectionMode === 'none' && !isTrigger && closeOnSelect !== false && onClose) {\n            onClose();\n          }\n          break;\n        case 'Enter':\n          // The Enter key should always close on select, except if overridden.\n          if (!isDisabled && closeOnSelect !== false && !isTrigger && onClose) {\n            onClose();\n          }\n          break;\n        default:\n          if (!isTrigger) {\n            e.continuePropagation();\n          }\n\n          onKeyDown?.(e);\n          break;\n      }\n    },\n    onKeyUp\n  });\n\n  let {focusProps} = useFocus({onBlur, onFocus, onFocusChange});\n  let domProps = filterDOMProps(item?.props);\n  delete domProps.id;\n  let linkProps = useLinkProps(item?.props);\n\n  return {\n    menuItemProps: {\n      ...ariaProps,\n      ...mergeProps(\n        domProps,\n        linkProps,\n        isTrigger \n          ? {onFocus: itemProps.onFocus, 'data-collection': itemProps['data-collection'], 'data-key': itemProps['data-key']} \n          : itemProps,\n        pressProps,\n        hoverProps,\n        keyboardProps,\n        focusProps,\n        // Prevent DOM focus from moving on mouse down when using virtual focus or this is a submenu/subdialog trigger.\n        data.shouldUseVirtualFocus || isTrigger ? {onMouseDown: e => e.preventDefault()} : undefined,\n        isDisabled ? undefined : {onClick}\n      ),\n      // If a submenu is expanded, set the tabIndex to -1 so that shift tabbing goes out of the menu instead of the parent menu item.\n      tabIndex: itemProps.tabIndex != null && isTriggerExpanded && !data.shouldUseVirtualFocus ? -1 : itemProps.tabIndex\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    },\n    isFocused,\n    isFocusVisible: isFocused && selectionManager.isFocused && isFocusVisible() && !isTriggerExpanded,\n    isSelected,\n    isPressed,\n    isDisabled\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}