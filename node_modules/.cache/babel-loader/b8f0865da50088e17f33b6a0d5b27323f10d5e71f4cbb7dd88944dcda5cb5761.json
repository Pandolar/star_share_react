{"ast":null,"code":"/**\n * 通知提示工具函数\n * 提供统一的消息提示功能\n */\n\n// 简单的事件发射器\nclass ToastEmitter {\n  constructor() {\n    this.listeners = [];\n  }\n  subscribe(listener) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n  emit(toast) {\n    this.listeners.forEach(listener => listener(toast));\n  }\n}\nconst emitter = new ToastEmitter();\n\n// 生成唯一ID\nconst generateId = () => Math.random().toString(36).substr(2, 9);\n\n// 创建通知实例\nconst createToast = (type, message, options = {}) => {\n  var _options$duration, _options$closable;\n  return {\n    id: generateId(),\n    type,\n    message,\n    duration: (_options$duration = options.duration) !== null && _options$duration !== void 0 ? _options$duration : 3000,\n    closable: (_options$closable = options.closable) !== null && _options$closable !== void 0 ? _options$closable : true,\n    timestamp: Date.now()\n  };\n};\n\n// 通知方法\nexport const toast = {\n  success: (message, options) => {\n    const toastInstance = createToast('success', message, options);\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n  error: (message, options) => {\n    const toastInstance = createToast('error', message, {\n      duration: 4000,\n      ...options\n    });\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n  warning: (message, options) => {\n    const toastInstance = createToast('warning', message, options);\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n  info: (message, options) => {\n    const toastInstance = createToast('info', message, options);\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n  // 订阅通知事件\n  subscribe: listener => {\n    return emitter.subscribe(listener);\n  }\n};\n\n// Toast消息工具\nexport const showMessage = {\n  success: message => {\n    // 这里可以集成具体的toast库，暂时使用alert\n    console.log('Success:', message);\n    alert(message);\n  },\n  error: message => {\n    console.error('Error:', message);\n    alert(`错误: ${message}`);\n  },\n  warning: message => {\n    console.warn('Warning:', message);\n    alert(`警告: ${message}`);\n  },\n  info: message => {\n    console.log('Info:', message);\n    alert(`信息: ${message}`);\n  }\n};","map":{"version":3,"names":["ToastEmitter","constructor","listeners","subscribe","listener","push","filter","l","emit","toast","forEach","emitter","generateId","Math","random","toString","substr","createToast","type","message","options","_options$duration","_options$closable","id","duration","closable","timestamp","Date","now","success","toastInstance","error","warning","info","showMessage","console","log","alert","warn"],"sources":["/opt/dev/star_share/web/src/utils/toast.ts"],"sourcesContent":["/**\n * 通知提示工具函数\n * 提供统一的消息提示功能\n */\n\nexport interface ToastOptions {\n  /** 持续时间（毫秒） */\n  duration?: number;\n  /** 是否可关闭 */\n  closable?: boolean;\n  /** 自定义样式 */\n  className?: string;\n}\n\nexport interface ToastInstance {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n  duration: number;\n  closable: boolean;\n  timestamp: number;\n}\n\n// 简单的事件发射器\nclass ToastEmitter {\n  private listeners: Array<(toast: ToastInstance) => void> = [];\n\n  subscribe(listener: (toast: ToastInstance) => void) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n\n  emit(toast: ToastInstance) {\n    this.listeners.forEach(listener => listener(toast));\n  }\n}\n\nconst emitter = new ToastEmitter();\n\n// 生成唯一ID\nconst generateId = () => Math.random().toString(36).substr(2, 9);\n\n// 创建通知实例\nconst createToast = (\n  type: ToastInstance['type'],\n  message: string,\n  options: ToastOptions = {}\n): ToastInstance => ({\n  id: generateId(),\n  type,\n  message,\n  duration: options.duration ?? 3000,\n  closable: options.closable ?? true,\n  timestamp: Date.now()\n});\n\n// 通知方法\nexport const toast = {\n  success: (message: string, options?: ToastOptions) => {\n    const toastInstance = createToast('success', message, options);\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n\n  error: (message: string, options?: ToastOptions) => {\n    const toastInstance = createToast('error', message, { duration: 4000, ...options });\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n\n  warning: (message: string, options?: ToastOptions) => {\n    const toastInstance = createToast('warning', message, options);\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n\n  info: (message: string, options?: ToastOptions) => {\n    const toastInstance = createToast('info', message, options);\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n\n  // 订阅通知事件\n  subscribe: (listener: (toast: ToastInstance) => void) => {\n    return emitter.subscribe(listener);\n  }\n};\n\n// Toast消息工具\nexport const showMessage = {\n  success: (message: string) => {\n    // 这里可以集成具体的toast库，暂时使用alert\n    console.log('Success:', message);\n    alert(message);\n  },\n  \n  error: (message: string) => {\n    console.error('Error:', message);\n    alert(`错误: ${message}`);\n  },\n  \n  warning: (message: string) => {\n    console.warn('Warning:', message);\n    alert(`警告: ${message}`);\n  },\n  \n  info: (message: string) => {\n    console.log('Info:', message);\n    alert(`信息: ${message}`);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}