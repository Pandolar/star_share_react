{"ast":null,"code":"//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n\n//---------------------------------------------------------------------\n// qrcode\n//---------------------------------------------------------------------\n\n/**\n * qrcode\n * @param typeNumber 1 to 40\n * @param errorCorrectionLevel 'L','M','Q','H'\n */\nexport const qrcode = function (typeNumber, errorCorrectionLevel) {\n  const PAD0 = 0xEC;\n  const PAD1 = 0x11;\n  let _typeNumber = typeNumber;\n  const _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n  let _modules = null;\n  let _moduleCount = 0;\n  let _dataCache = null;\n  const _dataList = [];\n  const _this = {};\n  const makeImpl = function (test, maskPattern) {\n    _moduleCount = _typeNumber * 4 + 17;\n    _modules = function (moduleCount) {\n      const modules = new Array(moduleCount);\n      for (let row = 0; row < moduleCount; row += 1) {\n        modules[row] = new Array(moduleCount);\n        for (let col = 0; col < moduleCount; col += 1) {\n          modules[row][col] = null;\n        }\n      }\n      return modules;\n    }(_moduleCount);\n    setupPositionProbePattern(0, 0);\n    setupPositionProbePattern(_moduleCount - 7, 0);\n    setupPositionProbePattern(0, _moduleCount - 7);\n    setupPositionAdjustPattern();\n    setupTimingPattern();\n    setupTypeInfo(test, maskPattern);\n    if (_typeNumber >= 7) {\n      setupTypeNumber(test);\n    }\n    if (_dataCache == null) {\n      _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n    }\n    mapData(_dataCache, maskPattern);\n  };\n  const setupPositionProbePattern = function (row, col) {\n    for (let r = -1; r <= 7; r += 1) {\n      if (row + r <= -1 || _moduleCount <= row + r) continue;\n      for (let c = -1; c <= 7; c += 1) {\n        if (col + c <= -1 || _moduleCount <= col + c) continue;\n        if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n          _modules[row + r][col + c] = true;\n        } else {\n          _modules[row + r][col + c] = false;\n        }\n      }\n    }\n  };\n  const getBestMaskPattern = function () {\n    let minLostPoint = 0;\n    let pattern = 0;\n    for (let i = 0; i < 8; i += 1) {\n      makeImpl(true, i);\n      const lostPoint = QRUtil.getLostPoint(_this);\n      if (i == 0 || minLostPoint > lostPoint) {\n        minLostPoint = lostPoint;\n        pattern = i;\n      }\n    }\n    return pattern;\n  };\n  const setupTimingPattern = function () {\n    for (let r = 8; r < _moduleCount - 8; r += 1) {\n      if (_modules[r][6] != null) {\n        continue;\n      }\n      _modules[r][6] = r % 2 == 0;\n    }\n    for (let c = 8; c < _moduleCount - 8; c += 1) {\n      if (_modules[6][c] != null) {\n        continue;\n      }\n      _modules[6][c] = c % 2 == 0;\n    }\n  };\n  const setupPositionAdjustPattern = function () {\n    const pos = QRUtil.getPatternPosition(_typeNumber);\n    for (let i = 0; i < pos.length; i += 1) {\n      for (let j = 0; j < pos.length; j += 1) {\n        const row = pos[i];\n        const col = pos[j];\n        if (_modules[row][col] != null) {\n          continue;\n        }\n        for (let r = -2; r <= 2; r += 1) {\n          for (let c = -2; c <= 2; c += 1) {\n            if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n              _modules[row + r][col + c] = true;\n            } else {\n              _modules[row + r][col + c] = false;\n            }\n          }\n        }\n      }\n    }\n  };\n  const setupTypeNumber = function (test) {\n    const bits = QRUtil.getBCHTypeNumber(_typeNumber);\n    for (let i = 0; i < 18; i += 1) {\n      const mod = !test && (bits >> i & 1) == 1;\n      _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n    }\n    for (let i = 0; i < 18; i += 1) {\n      const mod = !test && (bits >> i & 1) == 1;\n      _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n    }\n  };\n  const setupTypeInfo = function (test, maskPattern) {\n    const data = _errorCorrectionLevel << 3 | maskPattern;\n    const bits = QRUtil.getBCHTypeInfo(data);\n\n    // vertical\n    for (let i = 0; i < 15; i += 1) {\n      const mod = !test && (bits >> i & 1) == 1;\n      if (i < 6) {\n        _modules[i][8] = mod;\n      } else if (i < 8) {\n        _modules[i + 1][8] = mod;\n      } else {\n        _modules[_moduleCount - 15 + i][8] = mod;\n      }\n    }\n\n    // horizontal\n    for (let i = 0; i < 15; i += 1) {\n      const mod = !test && (bits >> i & 1) == 1;\n      if (i < 8) {\n        _modules[8][_moduleCount - i - 1] = mod;\n      } else if (i < 9) {\n        _modules[8][15 - i - 1 + 1] = mod;\n      } else {\n        _modules[8][15 - i - 1] = mod;\n      }\n    }\n\n    // fixed module\n    _modules[_moduleCount - 8][8] = !test;\n  };\n  const mapData = function (data, maskPattern) {\n    let inc = -1;\n    let row = _moduleCount - 1;\n    let bitIndex = 7;\n    let byteIndex = 0;\n    const maskFunc = QRUtil.getMaskFunction(maskPattern);\n    for (let col = _moduleCount - 1; col > 0; col -= 2) {\n      if (col == 6) col -= 1;\n      while (true) {\n        for (let c = 0; c < 2; c += 1) {\n          if (_modules[row][col - c] == null) {\n            let dark = false;\n            if (byteIndex < data.length) {\n              dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n            }\n            const mask = maskFunc(row, col - c);\n            if (mask) {\n              dark = !dark;\n            }\n            _modules[row][col - c] = dark;\n            bitIndex -= 1;\n            if (bitIndex == -1) {\n              byteIndex += 1;\n              bitIndex = 7;\n            }\n          }\n        }\n        row += inc;\n        if (row < 0 || _moduleCount <= row) {\n          row -= inc;\n          inc = -inc;\n          break;\n        }\n      }\n    }\n  };\n  const createBytes = function (buffer, rsBlocks) {\n    let offset = 0;\n    let maxDcCount = 0;\n    let maxEcCount = 0;\n    const dcdata = new Array(rsBlocks.length);\n    const ecdata = new Array(rsBlocks.length);\n    for (let r = 0; r < rsBlocks.length; r += 1) {\n      const dcCount = rsBlocks[r].dataCount;\n      const ecCount = rsBlocks[r].totalCount - dcCount;\n      maxDcCount = Math.max(maxDcCount, dcCount);\n      maxEcCount = Math.max(maxEcCount, ecCount);\n      dcdata[r] = new Array(dcCount);\n      for (let i = 0; i < dcdata[r].length; i += 1) {\n        dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n      }\n      offset += dcCount;\n      const rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n      const rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n      const modPoly = rawPoly.mod(rsPoly);\n      ecdata[r] = new Array(rsPoly.getLength() - 1);\n      for (let i = 0; i < ecdata[r].length; i += 1) {\n        const modIndex = i + modPoly.getLength() - ecdata[r].length;\n        ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n      }\n    }\n    let totalCodeCount = 0;\n    for (let i = 0; i < rsBlocks.length; i += 1) {\n      totalCodeCount += rsBlocks[i].totalCount;\n    }\n    const data = new Array(totalCodeCount);\n    let index = 0;\n    for (let i = 0; i < maxDcCount; i += 1) {\n      for (let r = 0; r < rsBlocks.length; r += 1) {\n        if (i < dcdata[r].length) {\n          data[index] = dcdata[r][i];\n          index += 1;\n        }\n      }\n    }\n    for (let i = 0; i < maxEcCount; i += 1) {\n      for (let r = 0; r < rsBlocks.length; r += 1) {\n        if (i < ecdata[r].length) {\n          data[index] = ecdata[r][i];\n          index += 1;\n        }\n      }\n    }\n    return data;\n  };\n  const createData = function (typeNumber, errorCorrectionLevel, dataList) {\n    const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n    const buffer = qrBitBuffer();\n    for (let i = 0; i < dataList.length; i += 1) {\n      const data = dataList[i];\n      buffer.put(data.getMode(), 4);\n      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n      data.write(buffer);\n    }\n\n    // calc num max data.\n    let totalDataCount = 0;\n    for (let i = 0; i < rsBlocks.length; i += 1) {\n      totalDataCount += rsBlocks[i].dataCount;\n    }\n    if (buffer.getLengthInBits() > totalDataCount * 8) {\n      throw 'code length overflow. (' + buffer.getLengthInBits() + '>' + totalDataCount * 8 + ')';\n    }\n\n    // end code\n    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n      buffer.put(0, 4);\n    }\n\n    // padding\n    while (buffer.getLengthInBits() % 8 != 0) {\n      buffer.putBit(false);\n    }\n\n    // padding\n    while (true) {\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD0, 8);\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD1, 8);\n    }\n    return createBytes(buffer, rsBlocks);\n  };\n  _this.addData = function (data, mode) {\n    mode = mode || 'Byte';\n    let newData = null;\n    switch (mode) {\n      case 'Numeric':\n        newData = qrNumber(data);\n        break;\n      case 'Alphanumeric':\n        newData = qrAlphaNum(data);\n        break;\n      case 'Byte':\n        newData = qr8BitByte(data);\n        break;\n      case 'Kanji':\n        newData = qrKanji(data);\n        break;\n      default:\n        throw 'mode:' + mode;\n    }\n    _dataList.push(newData);\n    _dataCache = null;\n  };\n  _this.isDark = function (row, col) {\n    if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n      throw row + ',' + col;\n    }\n    return _modules[row][col];\n  };\n  _this.getModuleCount = function () {\n    return _moduleCount;\n  };\n  _this.make = function () {\n    if (_typeNumber < 1) {\n      let typeNumber = 1;\n      for (; typeNumber < 40; typeNumber++) {\n        const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);\n        const buffer = qrBitBuffer();\n        for (let i = 0; i < _dataList.length; i++) {\n          const data = _dataList[i];\n          buffer.put(data.getMode(), 4);\n          buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n          data.write(buffer);\n        }\n        let totalDataCount = 0;\n        for (let i = 0; i < rsBlocks.length; i++) {\n          totalDataCount += rsBlocks[i].dataCount;\n        }\n        if (buffer.getLengthInBits() <= totalDataCount * 8) {\n          break;\n        }\n      }\n      _typeNumber = typeNumber;\n    }\n    makeImpl(false, getBestMaskPattern());\n  };\n  _this.createTableTag = function (cellSize, margin) {\n    cellSize = cellSize || 2;\n    margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n    let qrHtml = '';\n    qrHtml += '<table style=\"';\n    qrHtml += ' border-width: 0px; border-style: none;';\n    qrHtml += ' border-collapse: collapse;';\n    qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n    qrHtml += '\">';\n    qrHtml += '<tbody>';\n    for (let r = 0; r < _this.getModuleCount(); r += 1) {\n      qrHtml += '<tr>';\n      for (let c = 0; c < _this.getModuleCount(); c += 1) {\n        qrHtml += '<td style=\"';\n        qrHtml += ' border-width: 0px; border-style: none;';\n        qrHtml += ' border-collapse: collapse;';\n        qrHtml += ' padding: 0px; margin: 0px;';\n        qrHtml += ' width: ' + cellSize + 'px;';\n        qrHtml += ' height: ' + cellSize + 'px;';\n        qrHtml += ' background-color: ';\n        qrHtml += _this.isDark(r, c) ? '#000000' : '#ffffff';\n        qrHtml += ';';\n        qrHtml += '\"/>';\n      }\n      qrHtml += '</tr>';\n    }\n    qrHtml += '</tbody>';\n    qrHtml += '</table>';\n    return qrHtml;\n  };\n  _this.createSvgTag = function (cellSize, margin, alt, title) {\n    let opts = {};\n    if (typeof arguments[0] == 'object') {\n      // Called by options.\n      opts = arguments[0];\n      // overwrite cellSize and margin.\n      cellSize = opts.cellSize;\n      margin = opts.margin;\n      alt = opts.alt;\n      title = opts.title;\n    }\n    cellSize = cellSize || 2;\n    margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n\n    // Compose alt property surrogate\n    alt = typeof alt === 'string' ? {\n      text: alt\n    } : alt || {};\n    alt.text = alt.text || null;\n    alt.id = alt.text ? alt.id || 'qrcode-description' : null;\n\n    // Compose title property surrogate\n    title = typeof title === 'string' ? {\n      text: title\n    } : title || {};\n    title.text = title.text || null;\n    title.id = title.text ? title.id || 'qrcode-title' : null;\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    let c,\n      mc,\n      r,\n      mr,\n      qrSvg = '',\n      rect;\n    rect = 'l' + cellSize + ',0 0,' + cellSize + ' -' + cellSize + ',0 0,-' + cellSize + 'z ';\n    qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n    qrSvg += !opts.scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : '';\n    qrSvg += ' viewBox=\"0 0 ' + size + ' ' + size + '\" ';\n    qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n    qrSvg += title.text || alt.text ? ' role=\"img\" aria-labelledby=\"' + escapeXml([title.id, alt.id].join(' ').trim()) + '\"' : '';\n    qrSvg += '>';\n    qrSvg += title.text ? '<title id=\"' + escapeXml(title.id) + '\">' + escapeXml(title.text) + '</title>' : '';\n    qrSvg += alt.text ? '<description id=\"' + escapeXml(alt.id) + '\">' + escapeXml(alt.text) + '</description>' : '';\n    qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n    qrSvg += '<path d=\"';\n    for (r = 0; r < _this.getModuleCount(); r += 1) {\n      mr = r * cellSize + margin;\n      for (c = 0; c < _this.getModuleCount(); c += 1) {\n        if (_this.isDark(r, c)) {\n          mc = c * cellSize + margin;\n          qrSvg += 'M' + mc + ',' + mr + rect;\n        }\n      }\n    }\n    qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n    qrSvg += '</svg>';\n    return qrSvg;\n  };\n  _this.createDataURL = function (cellSize, margin) {\n    cellSize = cellSize || 2;\n    margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    const min = margin;\n    const max = size - margin;\n    return createDataURL(size, size, function (x, y) {\n      if (min <= x && x < max && min <= y && y < max) {\n        const c = Math.floor((x - min) / cellSize);\n        const r = Math.floor((y - min) / cellSize);\n        return _this.isDark(r, c) ? 0 : 1;\n      } else {\n        return 1;\n      }\n    });\n  };\n  _this.createImgTag = function (cellSize, margin, alt) {\n    cellSize = cellSize || 2;\n    margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    let img = '';\n    img += '<img';\n    img += '\\u0020src=\"';\n    img += _this.createDataURL(cellSize, margin);\n    img += '\"';\n    img += '\\u0020width=\"';\n    img += size;\n    img += '\"';\n    img += '\\u0020height=\"';\n    img += size;\n    img += '\"';\n    if (alt) {\n      img += '\\u0020alt=\"';\n      img += escapeXml(alt);\n      img += '\"';\n    }\n    img += '/>';\n    return img;\n  };\n  const escapeXml = function (s) {\n    let escaped = '';\n    for (let i = 0; i < s.length; i += 1) {\n      const c = s.charAt(i);\n      switch (c) {\n        case '<':\n          escaped += '&lt;';\n          break;\n        case '>':\n          escaped += '&gt;';\n          break;\n        case '&':\n          escaped += '&amp;';\n          break;\n        case '\"':\n          escaped += '&quot;';\n          break;\n        default:\n          escaped += c;\n          break;\n      }\n    }\n    return escaped;\n  };\n  const _createHalfASCII = function (margin) {\n    const cellSize = 1;\n    margin = typeof margin == 'undefined' ? cellSize * 2 : margin;\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    const min = margin;\n    const max = size - margin;\n    let y, x, r1, r2, p;\n    const blocks = {\n      '██': '█',\n      '█ ': '▀',\n      ' █': '▄',\n      '  ': ' '\n    };\n    const blocksLastLineNoMargin = {\n      '██': '▀',\n      '█ ': '▀',\n      ' █': ' ',\n      '  ': ' '\n    };\n    let ascii = '';\n    for (y = 0; y < size; y += 2) {\n      r1 = Math.floor((y - min) / cellSize);\n      r2 = Math.floor((y + 1 - min) / cellSize);\n      for (x = 0; x < size; x += 1) {\n        p = '█';\n        if (min <= x && x < max && min <= y && y < max && _this.isDark(r1, Math.floor((x - min) / cellSize))) {\n          p = ' ';\n        }\n        if (min <= x && x < max && min <= y + 1 && y + 1 < max && _this.isDark(r2, Math.floor((x - min) / cellSize))) {\n          p += ' ';\n        } else {\n          p += '█';\n        }\n\n        // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n        ascii += margin < 1 && y + 1 >= max ? blocksLastLineNoMargin[p] : blocks[p];\n      }\n      ascii += '\\n';\n    }\n    if (size % 2 && margin > 0) {\n      return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join('▀');\n    }\n    return ascii.substring(0, ascii.length - 1);\n  };\n  _this.createASCII = function (cellSize, margin) {\n    cellSize = cellSize || 1;\n    if (cellSize < 2) {\n      return _createHalfASCII(margin);\n    }\n    cellSize -= 1;\n    margin = typeof margin == 'undefined' ? cellSize * 2 : margin;\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    const min = margin;\n    const max = size - margin;\n    let y, x, r, p;\n    const white = Array(cellSize + 1).join('██');\n    const black = Array(cellSize + 1).join('  ');\n    let ascii = '';\n    let line = '';\n    for (y = 0; y < size; y += 1) {\n      r = Math.floor((y - min) / cellSize);\n      line = '';\n      for (x = 0; x < size; x += 1) {\n        p = 1;\n        if (min <= x && x < max && min <= y && y < max && _this.isDark(r, Math.floor((x - min) / cellSize))) {\n          p = 0;\n        }\n\n        // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n        line += p ? white : black;\n      }\n      for (r = 0; r < cellSize; r += 1) {\n        ascii += line + '\\n';\n      }\n    }\n    return ascii.substring(0, ascii.length - 1);\n  };\n  _this.renderTo2dContext = function (context, cellSize) {\n    cellSize = cellSize || 2;\n    const length = _this.getModuleCount();\n    for (let row = 0; row < length; row++) {\n      for (let col = 0; col < length; col++) {\n        context.fillStyle = _this.isDark(row, col) ? 'black' : 'white';\n        context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n      }\n    }\n  };\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrcode.stringToBytes\n//---------------------------------------------------------------------\n\nqrcode.stringToBytes = function (s) {\n  const bytes = [];\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charCodeAt(i);\n    bytes.push(c & 0xff);\n  }\n  return bytes;\n};\n\n//---------------------------------------------------------------------\n// qrcode.createStringToBytes\n//---------------------------------------------------------------------\n\n/**\n * @param unicodeData base64 string of byte array.\n * [16bit Unicode],[16bit Bytes], ...\n * @param numChars\n */\nqrcode.createStringToBytes = function (unicodeData, numChars) {\n  // create conversion map.\n\n  const unicodeMap = function () {\n    const bin = base64DecodeInputStream(unicodeData);\n    const read = function () {\n      const b = bin.read();\n      if (b == -1) throw 'eof';\n      return b;\n    };\n    let count = 0;\n    const unicodeMap = {};\n    while (true) {\n      const b0 = bin.read();\n      if (b0 == -1) break;\n      const b1 = read();\n      const b2 = read();\n      const b3 = read();\n      const k = String.fromCharCode(b0 << 8 | b1);\n      const v = b2 << 8 | b3;\n      unicodeMap[k] = v;\n      count += 1;\n    }\n    if (count != numChars) {\n      throw count + ' != ' + numChars;\n    }\n    return unicodeMap;\n  }();\n  const unknownChar = '?'.charCodeAt(0);\n  return function (s) {\n    const bytes = [];\n    for (let i = 0; i < s.length; i += 1) {\n      const c = s.charCodeAt(i);\n      if (c < 128) {\n        bytes.push(c);\n      } else {\n        const b = unicodeMap[s.charAt(i)];\n        if (typeof b == 'number') {\n          if ((b & 0xff) == b) {\n            // 1byte\n            bytes.push(b);\n          } else {\n            // 2bytes\n            bytes.push(b >>> 8);\n            bytes.push(b & 0xff);\n          }\n        } else {\n          bytes.push(unknownChar);\n        }\n      }\n    }\n    return bytes;\n  };\n};\n\n//---------------------------------------------------------------------\n// QRMode\n//---------------------------------------------------------------------\n\nconst QRMode = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3\n};\n\n//---------------------------------------------------------------------\n// QRErrorCorrectionLevel\n//---------------------------------------------------------------------\n\nconst QRErrorCorrectionLevel = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2\n};\n\n//---------------------------------------------------------------------\n// QRMaskPattern\n//---------------------------------------------------------------------\n\nconst QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n};\n\n//---------------------------------------------------------------------\n// QRUtil\n//---------------------------------------------------------------------\n\nconst QRUtil = function () {\n  const PATTERN_POSITION_TABLE = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]];\n  const G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n  const G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n  const G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\n  const _this = {};\n  const getBCHDigit = function (data) {\n    let digit = 0;\n    while (data != 0) {\n      digit += 1;\n      data >>>= 1;\n    }\n    return digit;\n  };\n  _this.getBCHTypeInfo = function (data) {\n    let d = data << 10;\n    while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n      d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);\n    }\n    return (data << 10 | d) ^ G15_MASK;\n  };\n  _this.getBCHTypeNumber = function (data) {\n    let d = data << 12;\n    while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n      d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);\n    }\n    return data << 12 | d;\n  };\n  _this.getPatternPosition = function (typeNumber) {\n    return PATTERN_POSITION_TABLE[typeNumber - 1];\n  };\n  _this.getMaskFunction = function (maskPattern) {\n    switch (maskPattern) {\n      case QRMaskPattern.PATTERN000:\n        return function (i, j) {\n          return (i + j) % 2 == 0;\n        };\n      case QRMaskPattern.PATTERN001:\n        return function (i, j) {\n          return i % 2 == 0;\n        };\n      case QRMaskPattern.PATTERN010:\n        return function (i, j) {\n          return j % 3 == 0;\n        };\n      case QRMaskPattern.PATTERN011:\n        return function (i, j) {\n          return (i + j) % 3 == 0;\n        };\n      case QRMaskPattern.PATTERN100:\n        return function (i, j) {\n          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n        };\n      case QRMaskPattern.PATTERN101:\n        return function (i, j) {\n          return i * j % 2 + i * j % 3 == 0;\n        };\n      case QRMaskPattern.PATTERN110:\n        return function (i, j) {\n          return (i * j % 2 + i * j % 3) % 2 == 0;\n        };\n      case QRMaskPattern.PATTERN111:\n        return function (i, j) {\n          return (i * j % 3 + (i + j) % 2) % 2 == 0;\n        };\n      default:\n        throw 'bad maskPattern:' + maskPattern;\n    }\n  };\n  _this.getErrorCorrectPolynomial = function (errorCorrectLength) {\n    let a = qrPolynomial([1], 0);\n    for (let i = 0; i < errorCorrectLength; i += 1) {\n      a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));\n    }\n    return a;\n  };\n  _this.getLengthInBits = function (mode, type) {\n    if (1 <= type && type < 10) {\n      // 1 - 9\n\n      switch (mode) {\n        case QRMode.MODE_NUMBER:\n          return 10;\n        case QRMode.MODE_ALPHA_NUM:\n          return 9;\n        case QRMode.MODE_8BIT_BYTE:\n          return 8;\n        case QRMode.MODE_KANJI:\n          return 8;\n        default:\n          throw 'mode:' + mode;\n      }\n    } else if (type < 27) {\n      // 10 - 26\n\n      switch (mode) {\n        case QRMode.MODE_NUMBER:\n          return 12;\n        case QRMode.MODE_ALPHA_NUM:\n          return 11;\n        case QRMode.MODE_8BIT_BYTE:\n          return 16;\n        case QRMode.MODE_KANJI:\n          return 10;\n        default:\n          throw 'mode:' + mode;\n      }\n    } else if (type < 41) {\n      // 27 - 40\n\n      switch (mode) {\n        case QRMode.MODE_NUMBER:\n          return 14;\n        case QRMode.MODE_ALPHA_NUM:\n          return 13;\n        case QRMode.MODE_8BIT_BYTE:\n          return 16;\n        case QRMode.MODE_KANJI:\n          return 12;\n        default:\n          throw 'mode:' + mode;\n      }\n    } else {\n      throw 'type:' + type;\n    }\n  };\n  _this.getLostPoint = function (qrcode) {\n    const moduleCount = qrcode.getModuleCount();\n    let lostPoint = 0;\n\n    // LEVEL1\n\n    for (let row = 0; row < moduleCount; row += 1) {\n      for (let col = 0; col < moduleCount; col += 1) {\n        let sameCount = 0;\n        const dark = qrcode.isDark(row, col);\n        for (let r = -1; r <= 1; r += 1) {\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n          for (let c = -1; c <= 1; c += 1) {\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n            if (r == 0 && c == 0) {\n              continue;\n            }\n            if (dark == qrcode.isDark(row + r, col + c)) {\n              sameCount += 1;\n            }\n          }\n        }\n        if (sameCount > 5) {\n          lostPoint += 3 + sameCount - 5;\n        }\n      }\n    }\n    ;\n\n    // LEVEL2\n\n    for (let row = 0; row < moduleCount - 1; row += 1) {\n      for (let col = 0; col < moduleCount - 1; col += 1) {\n        let count = 0;\n        if (qrcode.isDark(row, col)) count += 1;\n        if (qrcode.isDark(row + 1, col)) count += 1;\n        if (qrcode.isDark(row, col + 1)) count += 1;\n        if (qrcode.isDark(row + 1, col + 1)) count += 1;\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    }\n\n    // LEVEL3\n\n    for (let row = 0; row < moduleCount; row += 1) {\n      for (let col = 0; col < moduleCount - 6; col += 1) {\n        if (qrcode.isDark(row, col) && !qrcode.isDark(row, col + 1) && qrcode.isDark(row, col + 2) && qrcode.isDark(row, col + 3) && qrcode.isDark(row, col + 4) && !qrcode.isDark(row, col + 5) && qrcode.isDark(row, col + 6)) {\n          lostPoint += 40;\n        }\n      }\n    }\n    for (let col = 0; col < moduleCount; col += 1) {\n      for (let row = 0; row < moduleCount - 6; row += 1) {\n        if (qrcode.isDark(row, col) && !qrcode.isDark(row + 1, col) && qrcode.isDark(row + 2, col) && qrcode.isDark(row + 3, col) && qrcode.isDark(row + 4, col) && !qrcode.isDark(row + 5, col) && qrcode.isDark(row + 6, col)) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    // LEVEL4\n\n    let darkCount = 0;\n    for (let col = 0; col < moduleCount; col += 1) {\n      for (let row = 0; row < moduleCount; row += 1) {\n        if (qrcode.isDark(row, col)) {\n          darkCount += 1;\n        }\n      }\n    }\n    const ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n    return lostPoint;\n  };\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// QRMath\n//---------------------------------------------------------------------\n\nconst QRMath = function () {\n  const EXP_TABLE = new Array(256);\n  const LOG_TABLE = new Array(256);\n\n  // initialize tables\n  for (let i = 0; i < 8; i += 1) {\n    EXP_TABLE[i] = 1 << i;\n  }\n  for (let i = 8; i < 256; i += 1) {\n    EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8];\n  }\n  for (let i = 0; i < 255; i += 1) {\n    LOG_TABLE[EXP_TABLE[i]] = i;\n  }\n  const _this = {};\n  _this.glog = function (n) {\n    if (n < 1) {\n      throw 'glog(' + n + ')';\n    }\n    return LOG_TABLE[n];\n  };\n  _this.gexp = function (n) {\n    while (n < 0) {\n      n += 255;\n    }\n    while (n >= 256) {\n      n -= 255;\n    }\n    return EXP_TABLE[n];\n  };\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// qrPolynomial\n//---------------------------------------------------------------------\n\nconst qrPolynomial = function (num, shift) {\n  if (typeof num.length == 'undefined') {\n    throw num.length + '/' + shift;\n  }\n  const _num = function () {\n    let offset = 0;\n    while (offset < num.length && num[offset] == 0) {\n      offset += 1;\n    }\n    const _num = new Array(num.length - offset + shift);\n    for (let i = 0; i < num.length - offset; i += 1) {\n      _num[i] = num[i + offset];\n    }\n    return _num;\n  }();\n  const _this = {};\n  _this.getAt = function (index) {\n    return _num[index];\n  };\n  _this.getLength = function () {\n    return _num.length;\n  };\n  _this.multiply = function (e) {\n    const num = new Array(_this.getLength() + e.getLength() - 1);\n    for (let i = 0; i < _this.getLength(); i += 1) {\n      for (let j = 0; j < e.getLength(); j += 1) {\n        num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));\n      }\n    }\n    return qrPolynomial(num, 0);\n  };\n  _this.mod = function (e) {\n    if (_this.getLength() - e.getLength() < 0) {\n      return _this;\n    }\n    const ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\n    const num = new Array(_this.getLength());\n    for (let i = 0; i < _this.getLength(); i += 1) {\n      num[i] = _this.getAt(i);\n    }\n    for (let i = 0; i < e.getLength(); i += 1) {\n      num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\n    }\n\n    // recursive call\n    return qrPolynomial(num, 0).mod(e);\n  };\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// QRRSBlock\n//---------------------------------------------------------------------\n\nconst QRRSBlock = function () {\n  const RS_BLOCK_TABLE = [\n  // L\n  // M\n  // Q\n  // H\n\n  // 1\n  [1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9],\n  // 2\n  [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16],\n  // 3\n  [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13],\n  // 4\n  [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9],\n  // 5\n  [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12],\n  // 6\n  [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15],\n  // 7\n  [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14],\n  // 8\n  [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15],\n  // 9\n  [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13],\n  // 10\n  [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16],\n  // 11\n  [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13],\n  // 12\n  [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15],\n  // 13\n  [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12],\n  // 14\n  [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13],\n  // 15\n  [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13],\n  // 16\n  [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16],\n  // 17\n  [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15],\n  // 18\n  [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15],\n  // 19\n  [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14],\n  // 20\n  [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16],\n  // 21\n  [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17],\n  // 22\n  [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13],\n  // 23\n  [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16],\n  // 24\n  [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17],\n  // 25\n  [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16],\n  // 26\n  [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17],\n  // 27\n  [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16],\n  // 28\n  [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16],\n  // 29\n  [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16],\n  // 30\n  [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16],\n  // 31\n  [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16],\n  // 32\n  [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16],\n  // 33\n  [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16],\n  // 34\n  [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17],\n  // 35\n  [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16],\n  // 36\n  [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16],\n  // 37\n  [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16],\n  // 38\n  [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16],\n  // 39\n  [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16],\n  // 40\n  [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n  const qrRSBlock = function (totalCount, dataCount) {\n    const _this = {};\n    _this.totalCount = totalCount;\n    _this.dataCount = dataCount;\n    return _this;\n  };\n  const _this = {};\n  const getRsBlockTable = function (typeNumber, errorCorrectionLevel) {\n    switch (errorCorrectionLevel) {\n      case QRErrorCorrectionLevel.L:\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n      case QRErrorCorrectionLevel.M:\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n      case QRErrorCorrectionLevel.Q:\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n      case QRErrorCorrectionLevel.H:\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n      default:\n        return undefined;\n    }\n  };\n  _this.getRSBlocks = function (typeNumber, errorCorrectionLevel) {\n    const rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n    if (typeof rsBlock == 'undefined') {\n      throw 'bad rs block @ typeNumber:' + typeNumber + '/errorCorrectionLevel:' + errorCorrectionLevel;\n    }\n    const length = rsBlock.length / 3;\n    const list = [];\n    for (let i = 0; i < length; i += 1) {\n      const count = rsBlock[i * 3 + 0];\n      const totalCount = rsBlock[i * 3 + 1];\n      const dataCount = rsBlock[i * 3 + 2];\n      for (let j = 0; j < count; j += 1) {\n        list.push(qrRSBlock(totalCount, dataCount));\n      }\n    }\n    return list;\n  };\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// qrBitBuffer\n//---------------------------------------------------------------------\n\nconst qrBitBuffer = function () {\n  const _buffer = [];\n  let _length = 0;\n  const _this = {};\n  _this.getBuffer = function () {\n    return _buffer;\n  };\n  _this.getAt = function (index) {\n    const bufIndex = Math.floor(index / 8);\n    return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n  };\n  _this.put = function (num, length) {\n    for (let i = 0; i < length; i += 1) {\n      _this.putBit((num >>> length - i - 1 & 1) == 1);\n    }\n  };\n  _this.getLengthInBits = function () {\n    return _length;\n  };\n  _this.putBit = function (bit) {\n    const bufIndex = Math.floor(_length / 8);\n    if (_buffer.length <= bufIndex) {\n      _buffer.push(0);\n    }\n    if (bit) {\n      _buffer[bufIndex] |= 0x80 >>> _length % 8;\n    }\n    _length += 1;\n  };\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrNumber\n//---------------------------------------------------------------------\n\nconst qrNumber = function (data) {\n  const _mode = QRMode.MODE_NUMBER;\n  const _data = data;\n  const _this = {};\n  _this.getMode = function () {\n    return _mode;\n  };\n  _this.getLength = function (buffer) {\n    return _data.length;\n  };\n  _this.write = function (buffer) {\n    const data = _data;\n    let i = 0;\n    while (i + 2 < data.length) {\n      buffer.put(strToNum(data.substring(i, i + 3)), 10);\n      i += 3;\n    }\n    if (i < data.length) {\n      if (data.length - i == 1) {\n        buffer.put(strToNum(data.substring(i, i + 1)), 4);\n      } else if (data.length - i == 2) {\n        buffer.put(strToNum(data.substring(i, i + 2)), 7);\n      }\n    }\n  };\n  const strToNum = function (s) {\n    let num = 0;\n    for (let i = 0; i < s.length; i += 1) {\n      num = num * 10 + chatToNum(s.charAt(i));\n    }\n    return num;\n  };\n  const chatToNum = function (c) {\n    if ('0' <= c && c <= '9') {\n      return c.charCodeAt(0) - '0'.charCodeAt(0);\n    }\n    throw 'illegal char :' + c;\n  };\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrAlphaNum\n//---------------------------------------------------------------------\n\nconst qrAlphaNum = function (data) {\n  const _mode = QRMode.MODE_ALPHA_NUM;\n  const _data = data;\n  const _this = {};\n  _this.getMode = function () {\n    return _mode;\n  };\n  _this.getLength = function (buffer) {\n    return _data.length;\n  };\n  _this.write = function (buffer) {\n    const s = _data;\n    let i = 0;\n    while (i + 1 < s.length) {\n      buffer.put(getCode(s.charAt(i)) * 45 + getCode(s.charAt(i + 1)), 11);\n      i += 2;\n    }\n    if (i < s.length) {\n      buffer.put(getCode(s.charAt(i)), 6);\n    }\n  };\n  const getCode = function (c) {\n    if ('0' <= c && c <= '9') {\n      return c.charCodeAt(0) - '0'.charCodeAt(0);\n    } else if ('A' <= c && c <= 'Z') {\n      return c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    } else {\n      switch (c) {\n        case '\\u0020':\n          return 36;\n        case '$':\n          return 37;\n        case '%':\n          return 38;\n        case '*':\n          return 39;\n        case '+':\n          return 40;\n        case '-':\n          return 41;\n        case '.':\n          return 42;\n        case '/':\n          return 43;\n        case ':':\n          return 44;\n        default:\n          throw 'illegal char :' + c;\n      }\n    }\n  };\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qr8BitByte\n//---------------------------------------------------------------------\n\nconst qr8BitByte = function (data) {\n  const _mode = QRMode.MODE_8BIT_BYTE;\n  const _data = data;\n  const _bytes = qrcode.stringToBytes(data);\n  const _this = {};\n  _this.getMode = function () {\n    return _mode;\n  };\n  _this.getLength = function (buffer) {\n    return _bytes.length;\n  };\n  _this.write = function (buffer) {\n    for (let i = 0; i < _bytes.length; i += 1) {\n      buffer.put(_bytes[i], 8);\n    }\n  };\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrKanji\n//---------------------------------------------------------------------\n\nconst qrKanji = function (data) {\n  const _mode = QRMode.MODE_KANJI;\n  const _data = data;\n  const stringToBytes = qrcode.stringToBytes;\n  !function (c, code) {\n    // self test for sjis support.\n    const test = stringToBytes(c);\n    if (test.length != 2 || (test[0] << 8 | test[1]) != code) {\n      throw 'sjis not supported.';\n    }\n  }('\\u53cb', 0x9746);\n  const _bytes = stringToBytes(data);\n  const _this = {};\n  _this.getMode = function () {\n    return _mode;\n  };\n  _this.getLength = function (buffer) {\n    return ~~(_bytes.length / 2);\n  };\n  _this.write = function (buffer) {\n    const data = _bytes;\n    let i = 0;\n    while (i + 1 < data.length) {\n      let c = (0xff & data[i]) << 8 | 0xff & data[i + 1];\n      if (0x8140 <= c && c <= 0x9FFC) {\n        c -= 0x8140;\n      } else if (0xE040 <= c && c <= 0xEBBF) {\n        c -= 0xC140;\n      } else {\n        throw 'illegal char at ' + (i + 1) + '/' + c;\n      }\n      c = (c >>> 8 & 0xff) * 0xC0 + (c & 0xff);\n      buffer.put(c, 13);\n      i += 2;\n    }\n    if (i < data.length) {\n      throw 'illegal char at ' + (i + 1);\n    }\n  };\n  return _this;\n};\n\n//=====================================================================\n// GIF Support etc.\n//\n\n//---------------------------------------------------------------------\n// byteArrayOutputStream\n//---------------------------------------------------------------------\n\nconst byteArrayOutputStream = function () {\n  const _bytes = [];\n  const _this = {};\n  _this.writeByte = function (b) {\n    _bytes.push(b & 0xff);\n  };\n  _this.writeShort = function (i) {\n    _this.writeByte(i);\n    _this.writeByte(i >>> 8);\n  };\n  _this.writeBytes = function (b, off, len) {\n    off = off || 0;\n    len = len || b.length;\n    for (let i = 0; i < len; i += 1) {\n      _this.writeByte(b[i + off]);\n    }\n  };\n  _this.writeString = function (s) {\n    for (let i = 0; i < s.length; i += 1) {\n      _this.writeByte(s.charCodeAt(i));\n    }\n  };\n  _this.toByteArray = function () {\n    return _bytes;\n  };\n  _this.toString = function () {\n    let s = '';\n    s += '[';\n    for (let i = 0; i < _bytes.length; i += 1) {\n      if (i > 0) {\n        s += ',';\n      }\n      s += _bytes[i];\n    }\n    s += ']';\n    return s;\n  };\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// base64EncodeOutputStream\n//---------------------------------------------------------------------\n\nconst base64EncodeOutputStream = function () {\n  let _buffer = 0;\n  let _buflen = 0;\n  let _length = 0;\n  let _base64 = '';\n  const _this = {};\n  const writeEncoded = function (b) {\n    _base64 += String.fromCharCode(encode(b & 0x3f));\n  };\n  const encode = function (n) {\n    if (n < 0) {\n      throw 'n:' + n;\n    } else if (n < 26) {\n      return 0x41 + n;\n    } else if (n < 52) {\n      return 0x61 + (n - 26);\n    } else if (n < 62) {\n      return 0x30 + (n - 52);\n    } else if (n == 62) {\n      return 0x2b;\n    } else if (n == 63) {\n      return 0x2f;\n    } else {\n      throw 'n:' + n;\n    }\n  };\n  _this.writeByte = function (n) {\n    _buffer = _buffer << 8 | n & 0xff;\n    _buflen += 8;\n    _length += 1;\n    while (_buflen >= 6) {\n      writeEncoded(_buffer >>> _buflen - 6);\n      _buflen -= 6;\n    }\n  };\n  _this.flush = function () {\n    if (_buflen > 0) {\n      writeEncoded(_buffer << 6 - _buflen);\n      _buffer = 0;\n      _buflen = 0;\n    }\n    if (_length % 3 != 0) {\n      // padding\n      const padlen = 3 - _length % 3;\n      for (let i = 0; i < padlen; i += 1) {\n        _base64 += '=';\n      }\n    }\n  };\n  _this.toString = function () {\n    return _base64;\n  };\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// base64DecodeInputStream\n//---------------------------------------------------------------------\n\nconst base64DecodeInputStream = function (str) {\n  const _str = str;\n  let _pos = 0;\n  let _buffer = 0;\n  let _buflen = 0;\n  const _this = {};\n  _this.read = function () {\n    while (_buflen < 8) {\n      if (_pos >= _str.length) {\n        if (_buflen == 0) {\n          return -1;\n        }\n        throw 'unexpected end of file./' + _buflen;\n      }\n      const c = _str.charAt(_pos);\n      _pos += 1;\n      if (c == '=') {\n        _buflen = 0;\n        return -1;\n      } else if (c.match(/^\\s$/)) {\n        // ignore if whitespace.\n        continue;\n      }\n      _buffer = _buffer << 6 | decode(c.charCodeAt(0));\n      _buflen += 6;\n    }\n    const n = _buffer >>> _buflen - 8 & 0xff;\n    _buflen -= 8;\n    return n;\n  };\n  const decode = function (c) {\n    if (0x41 <= c && c <= 0x5a) {\n      return c - 0x41;\n    } else if (0x61 <= c && c <= 0x7a) {\n      return c - 0x61 + 26;\n    } else if (0x30 <= c && c <= 0x39) {\n      return c - 0x30 + 52;\n    } else if (c == 0x2b) {\n      return 62;\n    } else if (c == 0x2f) {\n      return 63;\n    } else {\n      throw 'c:' + c;\n    }\n  };\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// gifImage (B/W)\n//---------------------------------------------------------------------\n\nconst gifImage = function (width, height) {\n  const _width = width;\n  const _height = height;\n  const _data = new Array(width * height);\n  const _this = {};\n  _this.setPixel = function (x, y, pixel) {\n    _data[y * _width + x] = pixel;\n  };\n  _this.write = function (out) {\n    //---------------------------------\n    // GIF Signature\n\n    out.writeString('GIF87a');\n\n    //---------------------------------\n    // Screen Descriptor\n\n    out.writeShort(_width);\n    out.writeShort(_height);\n    out.writeByte(0x80); // 2bit\n    out.writeByte(0);\n    out.writeByte(0);\n\n    //---------------------------------\n    // Global Color Map\n\n    // black\n    out.writeByte(0x00);\n    out.writeByte(0x00);\n    out.writeByte(0x00);\n\n    // white\n    out.writeByte(0xff);\n    out.writeByte(0xff);\n    out.writeByte(0xff);\n\n    //---------------------------------\n    // Image Descriptor\n\n    out.writeString(',');\n    out.writeShort(0);\n    out.writeShort(0);\n    out.writeShort(_width);\n    out.writeShort(_height);\n    out.writeByte(0);\n\n    //---------------------------------\n    // Local Color Map\n\n    //---------------------------------\n    // Raster Data\n\n    const lzwMinCodeSize = 2;\n    const raster = getLZWRaster(lzwMinCodeSize);\n    out.writeByte(lzwMinCodeSize);\n    let offset = 0;\n    while (raster.length - offset > 255) {\n      out.writeByte(255);\n      out.writeBytes(raster, offset, 255);\n      offset += 255;\n    }\n    out.writeByte(raster.length - offset);\n    out.writeBytes(raster, offset, raster.length - offset);\n    out.writeByte(0x00);\n\n    //---------------------------------\n    // GIF Terminator\n    out.writeString(';');\n  };\n  const bitOutputStream = function (out) {\n    const _out = out;\n    let _bitLength = 0;\n    let _bitBuffer = 0;\n    const _this = {};\n    _this.write = function (data, length) {\n      if (data >>> length != 0) {\n        throw 'length over';\n      }\n      while (_bitLength + length >= 8) {\n        _out.writeByte(0xff & (data << _bitLength | _bitBuffer));\n        length -= 8 - _bitLength;\n        data >>>= 8 - _bitLength;\n        _bitBuffer = 0;\n        _bitLength = 0;\n      }\n      _bitBuffer = data << _bitLength | _bitBuffer;\n      _bitLength = _bitLength + length;\n    };\n    _this.flush = function () {\n      if (_bitLength > 0) {\n        _out.writeByte(_bitBuffer);\n      }\n    };\n    return _this;\n  };\n  const getLZWRaster = function (lzwMinCodeSize) {\n    const clearCode = 1 << lzwMinCodeSize;\n    const endCode = (1 << lzwMinCodeSize) + 1;\n    let bitLength = lzwMinCodeSize + 1;\n\n    // Setup LZWTable\n    const table = lzwTable();\n    for (let i = 0; i < clearCode; i += 1) {\n      table.add(String.fromCharCode(i));\n    }\n    table.add(String.fromCharCode(clearCode));\n    table.add(String.fromCharCode(endCode));\n    const byteOut = byteArrayOutputStream();\n    const bitOut = bitOutputStream(byteOut);\n\n    // clear code\n    bitOut.write(clearCode, bitLength);\n    let dataIndex = 0;\n    let s = String.fromCharCode(_data[dataIndex]);\n    dataIndex += 1;\n    while (dataIndex < _data.length) {\n      const c = String.fromCharCode(_data[dataIndex]);\n      dataIndex += 1;\n      if (table.contains(s + c)) {\n        s = s + c;\n      } else {\n        bitOut.write(table.indexOf(s), bitLength);\n        if (table.size() < 0xfff) {\n          if (table.size() == 1 << bitLength) {\n            bitLength += 1;\n          }\n          table.add(s + c);\n        }\n        s = c;\n      }\n    }\n    bitOut.write(table.indexOf(s), bitLength);\n\n    // end code\n    bitOut.write(endCode, bitLength);\n    bitOut.flush();\n    return byteOut.toByteArray();\n  };\n  const lzwTable = function () {\n    const _map = {};\n    let _size = 0;\n    const _this = {};\n    _this.add = function (key) {\n      if (_this.contains(key)) {\n        throw 'dup key:' + key;\n      }\n      _map[key] = _size;\n      _size += 1;\n    };\n    _this.size = function () {\n      return _size;\n    };\n    _this.indexOf = function (key) {\n      return _map[key];\n    };\n    _this.contains = function (key) {\n      return typeof _map[key] != 'undefined';\n    };\n    return _this;\n  };\n  return _this;\n};\nconst createDataURL = function (width, height, getPixel) {\n  const gif = gifImage(width, height);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      gif.setPixel(x, y, getPixel(x, y));\n    }\n  }\n  const b = byteArrayOutputStream();\n  gif.write(b);\n  const base64 = base64EncodeOutputStream();\n  const bytes = b.toByteArray();\n  for (let i = 0; i < bytes.length; i += 1) {\n    base64.writeByte(bytes[i]);\n  }\n  base64.flush();\n  return 'data:image/gif;base64,' + base64;\n};\nexport default qrcode;\nexport const stringToBytes = qrcode.stringToBytes;","map":{"version":3,"names":["qrcode","typeNumber","errorCorrectionLevel","PAD0","PAD1","_typeNumber","_errorCorrectionLevel","QRErrorCorrectionLevel","_modules","_moduleCount","_dataCache","_dataList","_this","makeImpl","test","maskPattern","moduleCount","modules","Array","row","col","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","r","c","getBestMaskPattern","minLostPoint","pattern","i","lostPoint","QRUtil","getLostPoint","pos","getPatternPosition","length","j","bits","getBCHTypeNumber","mod","Math","floor","data","getBCHTypeInfo","inc","bitIndex","byteIndex","maskFunc","getMaskFunction","dark","mask","createBytes","buffer","rsBlocks","offset","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","dataCount","ecCount","totalCount","max","getBuffer","rsPoly","getErrorCorrectPolynomial","rawPoly","qrPolynomial","getLength","modPoly","modIndex","getAt","totalCodeCount","index","dataList","QRRSBlock","getRSBlocks","qrBitBuffer","put","getMode","getLengthInBits","write","totalDataCount","putBit","addData","mode","newData","qrNumber","qrAlphaNum","qr8BitByte","qrKanji","push","isDark","getModuleCount","make","createTableTag","cellSize","margin","qrHtml","createSvgTag","alt","title","opts","arguments","text","id","size","mc","mr","qrSvg","rect","scalable","escapeXml","join","trim","createDataURL","min","x","y","createImgTag","img","s","escaped","charAt","_createHalfASCII","r1","r2","p","blocks","blocksLastLineNoMargin","ascii","substring","createASCII","white","black","line","renderTo2dContext","context","fillStyle","fillRect","stringToBytes","bytes","charCodeAt","createStringToBytes","unicodeData","numChars","unicodeMap","bin","base64DecodeInputStream","read","b","count","b0","b1","b2","b3","k","String","fromCharCode","v","unknownChar","QRMode","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","L","M","Q","H","QRMaskPattern","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","getBCHDigit","digit","d","errorCorrectLength","a","multiply","QRMath","gexp","type","sameCount","darkCount","ratio","abs","EXP_TABLE","LOG_TABLE","glog","n","num","shift","_num","e","RS_BLOCK_TABLE","qrRSBlock","getRsBlockTable","undefined","rsBlock","list","_buffer","_length","bufIndex","bit","_mode","_data","strToNum","chatToNum","getCode","_bytes","code","byteArrayOutputStream","writeByte","writeShort","writeBytes","off","len","writeString","toByteArray","toString","base64EncodeOutputStream","_buflen","_base64","writeEncoded","encode","flush","padlen","str","_str","_pos","match","decode","gifImage","width","height","_width","_height","setPixel","pixel","out","lzwMinCodeSize","raster","getLZWRaster","bitOutputStream","_out","_bitLength","_bitBuffer","clearCode","endCode","bitLength","table","lzwTable","add","byteOut","bitOut","dataIndex","contains","indexOf","_map","_size","key","getPixel","gif","base64"],"sources":["/opt/dev/star_share/web/node_modules/.pnpm/qrcode-generator@2.0.2/node_modules/qrcode-generator/dist/qrcode.mjs"],"sourcesContent":["//---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//  http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n\n//---------------------------------------------------------------------\n// qrcode\n//---------------------------------------------------------------------\n\n/**\n * qrcode\n * @param typeNumber 1 to 40\n * @param errorCorrectionLevel 'L','M','Q','H'\n */\nexport const qrcode = function(typeNumber, errorCorrectionLevel) {\n\n  const PAD0 = 0xEC;\n  const PAD1 = 0x11;\n\n  let _typeNumber = typeNumber;\n  const _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel];\n  let _modules = null;\n  let _moduleCount = 0;\n  let _dataCache = null;\n  const _dataList = [];\n\n  const _this = {};\n\n  const makeImpl = function(test, maskPattern) {\n\n    _moduleCount = _typeNumber * 4 + 17;\n    _modules = function(moduleCount) {\n      const modules = new Array(moduleCount);\n      for (let row = 0; row < moduleCount; row += 1) {\n        modules[row] = new Array(moduleCount);\n        for (let col = 0; col < moduleCount; col += 1) {\n          modules[row][col] = null;\n        }\n      }\n      return modules;\n    }(_moduleCount);\n\n    setupPositionProbePattern(0, 0);\n    setupPositionProbePattern(_moduleCount - 7, 0);\n    setupPositionProbePattern(0, _moduleCount - 7);\n    setupPositionAdjustPattern();\n    setupTimingPattern();\n    setupTypeInfo(test, maskPattern);\n\n    if (_typeNumber >= 7) {\n      setupTypeNumber(test);\n    }\n\n    if (_dataCache == null) {\n      _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList);\n    }\n\n    mapData(_dataCache, maskPattern);\n  };\n\n  const setupPositionProbePattern = function(row, col) {\n\n    for (let r = -1; r <= 7; r += 1) {\n\n      if (row + r <= -1 || _moduleCount <= row + r) continue;\n\n      for (let c = -1; c <= 7; c += 1) {\n\n        if (col + c <= -1 || _moduleCount <= col + c) continue;\n\n        if ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\n            || (0 <= c && c <= 6 && (r == 0 || r == 6) )\n            || (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\n          _modules[row + r][col + c] = true;\n        } else {\n          _modules[row + r][col + c] = false;\n        }\n      }\n    }\n  };\n\n  const getBestMaskPattern = function() {\n\n    let minLostPoint = 0;\n    let pattern = 0;\n\n    for (let i = 0; i < 8; i += 1) {\n\n      makeImpl(true, i);\n\n      const lostPoint = QRUtil.getLostPoint(_this);\n\n      if (i == 0 || minLostPoint > lostPoint) {\n        minLostPoint = lostPoint;\n        pattern = i;\n      }\n    }\n\n    return pattern;\n  };\n\n  const setupTimingPattern = function() {\n\n    for (let r = 8; r < _moduleCount - 8; r += 1) {\n      if (_modules[r][6] != null) {\n        continue;\n      }\n      _modules[r][6] = (r % 2 == 0);\n    }\n\n    for (let c = 8; c < _moduleCount - 8; c += 1) {\n      if (_modules[6][c] != null) {\n        continue;\n      }\n      _modules[6][c] = (c % 2 == 0);\n    }\n  };\n\n  const setupPositionAdjustPattern = function() {\n\n    const pos = QRUtil.getPatternPosition(_typeNumber);\n\n    for (let i = 0; i < pos.length; i += 1) {\n\n      for (let j = 0; j < pos.length; j += 1) {\n\n        const row = pos[i];\n        const col = pos[j];\n\n        if (_modules[row][col] != null) {\n          continue;\n        }\n\n        for (let r = -2; r <= 2; r += 1) {\n\n          for (let c = -2; c <= 2; c += 1) {\n\n            if (r == -2 || r == 2 || c == -2 || c == 2\n                || (r == 0 && c == 0) ) {\n              _modules[row + r][col + c] = true;\n            } else {\n              _modules[row + r][col + c] = false;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  const setupTypeNumber = function(test) {\n\n    const bits = QRUtil.getBCHTypeNumber(_typeNumber);\n\n    for (let i = 0; i < 18; i += 1) {\n      const mod = (!test && ( (bits >> i) & 1) == 1);\n      _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n    }\n\n    for (let i = 0; i < 18; i += 1) {\n      const mod = (!test && ( (bits >> i) & 1) == 1);\n      _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n    }\n  };\n\n  const setupTypeInfo = function(test, maskPattern) {\n\n    const data = (_errorCorrectionLevel << 3) | maskPattern;\n    const bits = QRUtil.getBCHTypeInfo(data);\n\n    // vertical\n    for (let i = 0; i < 15; i += 1) {\n\n      const mod = (!test && ( (bits >> i) & 1) == 1);\n\n      if (i < 6) {\n        _modules[i][8] = mod;\n      } else if (i < 8) {\n        _modules[i + 1][8] = mod;\n      } else {\n        _modules[_moduleCount - 15 + i][8] = mod;\n      }\n    }\n\n    // horizontal\n    for (let i = 0; i < 15; i += 1) {\n\n      const mod = (!test && ( (bits >> i) & 1) == 1);\n\n      if (i < 8) {\n        _modules[8][_moduleCount - i - 1] = mod;\n      } else if (i < 9) {\n        _modules[8][15 - i - 1 + 1] = mod;\n      } else {\n        _modules[8][15 - i - 1] = mod;\n      }\n    }\n\n    // fixed module\n    _modules[_moduleCount - 8][8] = (!test);\n  };\n\n  const mapData = function(data, maskPattern) {\n\n    let inc = -1;\n    let row = _moduleCount - 1;\n    let bitIndex = 7;\n    let byteIndex = 0;\n    const maskFunc = QRUtil.getMaskFunction(maskPattern);\n\n    for (let col = _moduleCount - 1; col > 0; col -= 2) {\n\n      if (col == 6) col -= 1;\n\n      while (true) {\n\n        for (let c = 0; c < 2; c += 1) {\n\n          if (_modules[row][col - c] == null) {\n\n            let dark = false;\n\n            if (byteIndex < data.length) {\n              dark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\n            }\n\n            const mask = maskFunc(row, col - c);\n\n            if (mask) {\n              dark = !dark;\n            }\n\n            _modules[row][col - c] = dark;\n            bitIndex -= 1;\n\n            if (bitIndex == -1) {\n              byteIndex += 1;\n              bitIndex = 7;\n            }\n          }\n        }\n\n        row += inc;\n\n        if (row < 0 || _moduleCount <= row) {\n          row -= inc;\n          inc = -inc;\n          break;\n        }\n      }\n    }\n  };\n\n  const createBytes = function(buffer, rsBlocks) {\n\n    let offset = 0;\n\n    let maxDcCount = 0;\n    let maxEcCount = 0;\n\n    const dcdata = new Array(rsBlocks.length);\n    const ecdata = new Array(rsBlocks.length);\n\n    for (let r = 0; r < rsBlocks.length; r += 1) {\n\n      const dcCount = rsBlocks[r].dataCount;\n      const ecCount = rsBlocks[r].totalCount - dcCount;\n\n      maxDcCount = Math.max(maxDcCount, dcCount);\n      maxEcCount = Math.max(maxEcCount, ecCount);\n\n      dcdata[r] = new Array(dcCount);\n\n      for (let i = 0; i < dcdata[r].length; i += 1) {\n        dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n      }\n      offset += dcCount;\n\n      const rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n      const rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n\n      const modPoly = rawPoly.mod(rsPoly);\n      ecdata[r] = new Array(rsPoly.getLength() - 1);\n      for (let i = 0; i < ecdata[r].length; i += 1) {\n        const modIndex = i + modPoly.getLength() - ecdata[r].length;\n        ecdata[r][i] = (modIndex >= 0)? modPoly.getAt(modIndex) : 0;\n      }\n    }\n\n    let totalCodeCount = 0;\n    for (let i = 0; i < rsBlocks.length; i += 1) {\n      totalCodeCount += rsBlocks[i].totalCount;\n    }\n\n    const data = new Array(totalCodeCount);\n    let index = 0;\n\n    for (let i = 0; i < maxDcCount; i += 1) {\n      for (let r = 0; r < rsBlocks.length; r += 1) {\n        if (i < dcdata[r].length) {\n          data[index] = dcdata[r][i];\n          index += 1;\n        }\n      }\n    }\n\n    for (let i = 0; i < maxEcCount; i += 1) {\n      for (let r = 0; r < rsBlocks.length; r += 1) {\n        if (i < ecdata[r].length) {\n          data[index] = ecdata[r][i];\n          index += 1;\n        }\n      }\n    }\n\n    return data;\n  };\n\n  const createData = function(typeNumber, errorCorrectionLevel, dataList) {\n\n    const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel);\n\n    const buffer = qrBitBuffer();\n\n    for (let i = 0; i < dataList.length; i += 1) {\n      const data = dataList[i];\n      buffer.put(data.getMode(), 4);\n      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber) );\n      data.write(buffer);\n    }\n\n    // calc num max data.\n    let totalDataCount = 0;\n    for (let i = 0; i < rsBlocks.length; i += 1) {\n      totalDataCount += rsBlocks[i].dataCount;\n    }\n\n    if (buffer.getLengthInBits() > totalDataCount * 8) {\n      throw 'code length overflow. ('\n        + buffer.getLengthInBits()\n        + '>'\n        + totalDataCount * 8\n        + ')';\n    }\n\n    // end code\n    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n      buffer.put(0, 4);\n    }\n\n    // padding\n    while (buffer.getLengthInBits() % 8 != 0) {\n      buffer.putBit(false);\n    }\n\n    // padding\n    while (true) {\n\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD0, 8);\n\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD1, 8);\n    }\n\n    return createBytes(buffer, rsBlocks);\n  };\n\n  _this.addData = function(data, mode) {\n\n    mode = mode || 'Byte';\n\n    let newData = null;\n\n    switch(mode) {\n    case 'Numeric' :\n      newData = qrNumber(data);\n      break;\n    case 'Alphanumeric' :\n      newData = qrAlphaNum(data);\n      break;\n    case 'Byte' :\n      newData = qr8BitByte(data);\n      break;\n    case 'Kanji' :\n      newData = qrKanji(data);\n      break;\n    default :\n      throw 'mode:' + mode;\n    }\n\n    _dataList.push(newData);\n    _dataCache = null;\n  };\n\n  _this.isDark = function(row, col) {\n    if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n      throw row + ',' + col;\n    }\n    return _modules[row][col];\n  };\n\n  _this.getModuleCount = function() {\n    return _moduleCount;\n  };\n\n  _this.make = function() {\n    if (_typeNumber < 1) {\n      let typeNumber = 1;\n\n      for (; typeNumber < 40; typeNumber++) {\n        const rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel);\n        const buffer = qrBitBuffer();\n\n        for (let i = 0; i < _dataList.length; i++) {\n          const data = _dataList[i];\n          buffer.put(data.getMode(), 4);\n          buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber) );\n          data.write(buffer);\n        }\n\n        let totalDataCount = 0;\n        for (let i = 0; i < rsBlocks.length; i++) {\n          totalDataCount += rsBlocks[i].dataCount;\n        }\n\n        if (buffer.getLengthInBits() <= totalDataCount * 8) {\n          break;\n        }\n      }\n\n      _typeNumber = typeNumber;\n    }\n\n    makeImpl(false, getBestMaskPattern() );\n  };\n\n  _this.createTableTag = function(cellSize, margin) {\n\n    cellSize = cellSize || 2;\n    margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n    let qrHtml = '';\n\n    qrHtml += '<table style=\"';\n    qrHtml += ' border-width: 0px; border-style: none;';\n    qrHtml += ' border-collapse: collapse;';\n    qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n    qrHtml += '\">';\n    qrHtml += '<tbody>';\n\n    for (let r = 0; r < _this.getModuleCount(); r += 1) {\n\n      qrHtml += '<tr>';\n\n      for (let c = 0; c < _this.getModuleCount(); c += 1) {\n        qrHtml += '<td style=\"';\n        qrHtml += ' border-width: 0px; border-style: none;';\n        qrHtml += ' border-collapse: collapse;';\n        qrHtml += ' padding: 0px; margin: 0px;';\n        qrHtml += ' width: ' + cellSize + 'px;';\n        qrHtml += ' height: ' + cellSize + 'px;';\n        qrHtml += ' background-color: ';\n        qrHtml += _this.isDark(r, c)? '#000000' : '#ffffff';\n        qrHtml += ';';\n        qrHtml += '\"/>';\n      }\n\n      qrHtml += '</tr>';\n    }\n\n    qrHtml += '</tbody>';\n    qrHtml += '</table>';\n\n    return qrHtml;\n  };\n\n  _this.createSvgTag = function(cellSize, margin, alt, title) {\n\n    let opts = {};\n    if (typeof arguments[0] == 'object') {\n      // Called by options.\n      opts = arguments[0];\n      // overwrite cellSize and margin.\n      cellSize = opts.cellSize;\n      margin = opts.margin;\n      alt = opts.alt;\n      title = opts.title;\n    }\n\n    cellSize = cellSize || 2;\n    margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n    // Compose alt property surrogate\n    alt = (typeof alt === 'string') ? {text: alt} : alt || {};\n    alt.text = alt.text || null;\n    alt.id = (alt.text) ? alt.id || 'qrcode-description' : null;\n\n    // Compose title property surrogate\n    title = (typeof title === 'string') ? {text: title} : title || {};\n    title.text = title.text || null;\n    title.id = (title.text) ? title.id || 'qrcode-title' : null;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    let c, mc, r, mr, qrSvg='', rect;\n\n    rect = 'l' + cellSize + ',0 0,' + cellSize +\n      ' -' + cellSize + ',0 0,-' + cellSize + 'z ';\n\n    qrSvg += '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"';\n    qrSvg += !opts.scalable ? ' width=\"' + size + 'px\" height=\"' + size + 'px\"' : '';\n    qrSvg += ' viewBox=\"0 0 ' + size + ' ' + size + '\" ';\n    qrSvg += ' preserveAspectRatio=\"xMinYMin meet\"';\n    qrSvg += (title.text || alt.text) ? ' role=\"img\" aria-labelledby=\"' +\n        escapeXml([title.id, alt.id].join(' ').trim() ) + '\"' : '';\n    qrSvg += '>';\n    qrSvg += (title.text) ? '<title id=\"' + escapeXml(title.id) + '\">' +\n        escapeXml(title.text) + '</title>' : '';\n    qrSvg += (alt.text) ? '<description id=\"' + escapeXml(alt.id) + '\">' +\n        escapeXml(alt.text) + '</description>' : '';\n    qrSvg += '<rect width=\"100%\" height=\"100%\" fill=\"white\" cx=\"0\" cy=\"0\"/>';\n    qrSvg += '<path d=\"';\n\n    for (r = 0; r < _this.getModuleCount(); r += 1) {\n      mr = r * cellSize + margin;\n      for (c = 0; c < _this.getModuleCount(); c += 1) {\n        if (_this.isDark(r, c) ) {\n          mc = c*cellSize+margin;\n          qrSvg += 'M' + mc + ',' + mr + rect;\n        }\n      }\n    }\n\n    qrSvg += '\" stroke=\"transparent\" fill=\"black\"/>';\n    qrSvg += '</svg>';\n\n    return qrSvg;\n  };\n\n  _this.createDataURL = function(cellSize, margin) {\n\n    cellSize = cellSize || 2;\n    margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    const min = margin;\n    const max = size - margin;\n\n    return createDataURL(size, size, function(x, y) {\n      if (min <= x && x < max && min <= y && y < max) {\n        const c = Math.floor( (x - min) / cellSize);\n        const r = Math.floor( (y - min) / cellSize);\n        return _this.isDark(r, c)? 0 : 1;\n      } else {\n        return 1;\n      }\n    } );\n  };\n\n  _this.createImgTag = function(cellSize, margin, alt) {\n\n    cellSize = cellSize || 2;\n    margin = (typeof margin == 'undefined')? cellSize * 4 : margin;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n\n    let img = '';\n    img += '<img';\n    img += '\\u0020src=\"';\n    img += _this.createDataURL(cellSize, margin);\n    img += '\"';\n    img += '\\u0020width=\"';\n    img += size;\n    img += '\"';\n    img += '\\u0020height=\"';\n    img += size;\n    img += '\"';\n    if (alt) {\n      img += '\\u0020alt=\"';\n      img += escapeXml(alt);\n      img += '\"';\n    }\n    img += '/>';\n\n    return img;\n  };\n\n  const escapeXml = function(s) {\n    let escaped = '';\n    for (let i = 0; i < s.length; i += 1) {\n      const c = s.charAt(i);\n      switch(c) {\n      case '<': escaped += '&lt;'; break;\n      case '>': escaped += '&gt;'; break;\n      case '&': escaped += '&amp;'; break;\n      case '\"': escaped += '&quot;'; break;\n      default : escaped += c; break;\n      }\n    }\n    return escaped;\n  };\n\n  const _createHalfASCII = function(margin) {\n    const cellSize = 1;\n    margin = (typeof margin == 'undefined')? cellSize * 2 : margin;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    const min = margin;\n    const max = size - margin;\n\n    let y, x, r1, r2, p;\n\n    const blocks = {\n      '██': '█',\n      '█ ': '▀',\n      ' █': '▄',\n      '  ': ' '\n    };\n\n    const blocksLastLineNoMargin = {\n      '██': '▀',\n      '█ ': '▀',\n      ' █': ' ',\n      '  ': ' '\n    };\n\n    let ascii = '';\n    for (y = 0; y < size; y += 2) {\n      r1 = Math.floor((y - min) / cellSize);\n      r2 = Math.floor((y + 1 - min) / cellSize);\n      for (x = 0; x < size; x += 1) {\n        p = '█';\n\n        if (min <= x && x < max && min <= y && y < max && _this.isDark(r1, Math.floor((x - min) / cellSize))) {\n          p = ' ';\n        }\n\n        if (min <= x && x < max && min <= y+1 && y+1 < max && _this.isDark(r2, Math.floor((x - min) / cellSize))) {\n          p += ' ';\n        }\n        else {\n          p += '█';\n        }\n\n        // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n        ascii += (margin < 1 && y+1 >= max) ? blocksLastLineNoMargin[p] : blocks[p];\n      }\n\n      ascii += '\\n';\n    }\n\n    if (size % 2 && margin > 0) {\n      return ascii.substring(0, ascii.length - size - 1) + Array(size+1).join('▀');\n    }\n\n    return ascii.substring(0, ascii.length-1);\n  };\n\n  _this.createASCII = function(cellSize, margin) {\n    cellSize = cellSize || 1;\n\n    if (cellSize < 2) {\n      return _createHalfASCII(margin);\n    }\n\n    cellSize -= 1;\n    margin = (typeof margin == 'undefined')? cellSize * 2 : margin;\n\n    const size = _this.getModuleCount() * cellSize + margin * 2;\n    const min = margin;\n    const max = size - margin;\n\n    let y, x, r, p;\n\n    const white = Array(cellSize+1).join('██');\n    const black = Array(cellSize+1).join('  ');\n\n    let ascii = '';\n    let line = '';\n    for (y = 0; y < size; y += 1) {\n      r = Math.floor( (y - min) / cellSize);\n      line = '';\n      for (x = 0; x < size; x += 1) {\n        p = 1;\n\n        if (min <= x && x < max && min <= y && y < max && _this.isDark(r, Math.floor((x - min) / cellSize))) {\n          p = 0;\n        }\n\n        // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.\n        line += p ? white : black;\n      }\n\n      for (r = 0; r < cellSize; r += 1) {\n        ascii += line + '\\n';\n      }\n    }\n\n    return ascii.substring(0, ascii.length-1);\n  };\n\n  _this.renderTo2dContext = function(context, cellSize) {\n    cellSize = cellSize || 2;\n    const length = _this.getModuleCount();\n    for (let row = 0; row < length; row++) {\n      for (let col = 0; col < length; col++) {\n        context.fillStyle = _this.isDark(row, col) ? 'black' : 'white';\n        context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize);\n      }\n    }\n  }\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrcode.stringToBytes\n//---------------------------------------------------------------------\n\nqrcode.stringToBytes = function(s) {\n  const bytes = [];\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charCodeAt(i);\n    bytes.push(c & 0xff);\n  }\n  return bytes;\n};\n\n//---------------------------------------------------------------------\n// qrcode.createStringToBytes\n//---------------------------------------------------------------------\n\n/**\n * @param unicodeData base64 string of byte array.\n * [16bit Unicode],[16bit Bytes], ...\n * @param numChars\n */\nqrcode.createStringToBytes = function(unicodeData, numChars) {\n\n  // create conversion map.\n\n  const unicodeMap = function() {\n\n    const bin = base64DecodeInputStream(unicodeData);\n    const read = function() {\n      const b = bin.read();\n      if (b == -1) throw 'eof';\n      return b;\n    };\n\n    let count = 0;\n    const unicodeMap = {};\n    while (true) {\n      const b0 = bin.read();\n      if (b0 == -1) break;\n      const b1 = read();\n      const b2 = read();\n      const b3 = read();\n      const k = String.fromCharCode( (b0 << 8) | b1);\n      const v = (b2 << 8) | b3;\n      unicodeMap[k] = v;\n      count += 1;\n    }\n    if (count != numChars) {\n      throw count + ' != ' + numChars;\n    }\n\n    return unicodeMap;\n  }();\n\n  const unknownChar = '?'.charCodeAt(0);\n\n  return function(s) {\n    const bytes = [];\n    for (let i = 0; i < s.length; i += 1) {\n      const c = s.charCodeAt(i);\n      if (c < 128) {\n        bytes.push(c);\n      } else {\n        const b = unicodeMap[s.charAt(i)];\n        if (typeof b == 'number') {\n          if ( (b & 0xff) == b) {\n            // 1byte\n            bytes.push(b);\n          } else {\n            // 2bytes\n            bytes.push(b >>> 8);\n            bytes.push(b & 0xff);\n          }\n        } else {\n          bytes.push(unknownChar);\n        }\n      }\n    }\n    return bytes;\n  };\n};\n\n//---------------------------------------------------------------------\n// QRMode\n//---------------------------------------------------------------------\n\nconst QRMode = {\n  MODE_NUMBER :    1 << 0,\n  MODE_ALPHA_NUM : 1 << 1,\n  MODE_8BIT_BYTE : 1 << 2,\n  MODE_KANJI :     1 << 3\n};\n\n//---------------------------------------------------------------------\n// QRErrorCorrectionLevel\n//---------------------------------------------------------------------\n\nconst QRErrorCorrectionLevel = {\n  L : 1,\n  M : 0,\n  Q : 3,\n  H : 2\n};\n\n//---------------------------------------------------------------------\n// QRMaskPattern\n//---------------------------------------------------------------------\n\nconst QRMaskPattern = {\n  PATTERN000 : 0,\n  PATTERN001 : 1,\n  PATTERN010 : 2,\n  PATTERN011 : 3,\n  PATTERN100 : 4,\n  PATTERN101 : 5,\n  PATTERN110 : 6,\n  PATTERN111 : 7\n};\n\n//---------------------------------------------------------------------\n// QRUtil\n//---------------------------------------------------------------------\n\nconst QRUtil = function() {\n\n  const PATTERN_POSITION_TABLE = [\n    [],\n    [6, 18],\n    [6, 22],\n    [6, 26],\n    [6, 30],\n    [6, 34],\n    [6, 22, 38],\n    [6, 24, 42],\n    [6, 26, 46],\n    [6, 28, 50],\n    [6, 30, 54],\n    [6, 32, 58],\n    [6, 34, 62],\n    [6, 26, 46, 66],\n    [6, 26, 48, 70],\n    [6, 26, 50, 74],\n    [6, 30, 54, 78],\n    [6, 30, 56, 82],\n    [6, 30, 58, 86],\n    [6, 34, 62, 90],\n    [6, 28, 50, 72, 94],\n    [6, 26, 50, 74, 98],\n    [6, 30, 54, 78, 102],\n    [6, 28, 54, 80, 106],\n    [6, 32, 58, 84, 110],\n    [6, 30, 58, 86, 114],\n    [6, 34, 62, 90, 118],\n    [6, 26, 50, 74, 98, 122],\n    [6, 30, 54, 78, 102, 126],\n    [6, 26, 52, 78, 104, 130],\n    [6, 30, 56, 82, 108, 134],\n    [6, 34, 60, 86, 112, 138],\n    [6, 30, 58, 86, 114, 142],\n    [6, 34, 62, 90, 118, 146],\n    [6, 30, 54, 78, 102, 126, 150],\n    [6, 24, 50, 76, 102, 128, 154],\n    [6, 28, 54, 80, 106, 132, 158],\n    [6, 32, 58, 84, 110, 136, 162],\n    [6, 26, 54, 82, 110, 138, 166],\n    [6, 30, 58, 86, 114, 142, 170]\n  ];\n  const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);\n  const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);\n  const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);\n\n  const _this = {};\n\n  const getBCHDigit = function(data) {\n    let digit = 0;\n    while (data != 0) {\n      digit += 1;\n      data >>>= 1;\n    }\n    return digit;\n  };\n\n  _this.getBCHTypeInfo = function(data) {\n    let d = data << 10;\n    while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n      d ^= (G15 << (getBCHDigit(d) - getBCHDigit(G15) ) );\n    }\n    return ( (data << 10) | d) ^ G15_MASK;\n  };\n\n  _this.getBCHTypeNumber = function(data) {\n    let d = data << 12;\n    while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n      d ^= (G18 << (getBCHDigit(d) - getBCHDigit(G18) ) );\n    }\n    return (data << 12) | d;\n  };\n\n  _this.getPatternPosition = function(typeNumber) {\n    return PATTERN_POSITION_TABLE[typeNumber - 1];\n  };\n\n  _this.getMaskFunction = function(maskPattern) {\n\n    switch (maskPattern) {\n\n    case QRMaskPattern.PATTERN000 :\n      return function(i, j) { return (i + j) % 2 == 0; };\n    case QRMaskPattern.PATTERN001 :\n      return function(i, j) { return i % 2 == 0; };\n    case QRMaskPattern.PATTERN010 :\n      return function(i, j) { return j % 3 == 0; };\n    case QRMaskPattern.PATTERN011 :\n      return function(i, j) { return (i + j) % 3 == 0; };\n    case QRMaskPattern.PATTERN100 :\n      return function(i, j) { return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0; };\n    case QRMaskPattern.PATTERN101 :\n      return function(i, j) { return (i * j) % 2 + (i * j) % 3 == 0; };\n    case QRMaskPattern.PATTERN110 :\n      return function(i, j) { return ( (i * j) % 2 + (i * j) % 3) % 2 == 0; };\n    case QRMaskPattern.PATTERN111 :\n      return function(i, j) { return ( (i * j) % 3 + (i + j) % 2) % 2 == 0; };\n\n    default :\n      throw 'bad maskPattern:' + maskPattern;\n    }\n  };\n\n  _this.getErrorCorrectPolynomial = function(errorCorrectLength) {\n    let a = qrPolynomial([1], 0);\n    for (let i = 0; i < errorCorrectLength; i += 1) {\n      a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0) );\n    }\n    return a;\n  };\n\n  _this.getLengthInBits = function(mode, type) {\n\n    if (1 <= type && type < 10) {\n\n      // 1 - 9\n\n      switch(mode) {\n      case QRMode.MODE_NUMBER    : return 10;\n      case QRMode.MODE_ALPHA_NUM : return 9;\n      case QRMode.MODE_8BIT_BYTE : return 8;\n      case QRMode.MODE_KANJI     : return 8;\n      default :\n        throw 'mode:' + mode;\n      }\n\n    } else if (type < 27) {\n\n      // 10 - 26\n\n      switch(mode) {\n      case QRMode.MODE_NUMBER    : return 12;\n      case QRMode.MODE_ALPHA_NUM : return 11;\n      case QRMode.MODE_8BIT_BYTE : return 16;\n      case QRMode.MODE_KANJI     : return 10;\n      default :\n        throw 'mode:' + mode;\n      }\n\n    } else if (type < 41) {\n\n      // 27 - 40\n\n      switch(mode) {\n      case QRMode.MODE_NUMBER    : return 14;\n      case QRMode.MODE_ALPHA_NUM : return 13;\n      case QRMode.MODE_8BIT_BYTE : return 16;\n      case QRMode.MODE_KANJI     : return 12;\n      default :\n        throw 'mode:' + mode;\n      }\n\n    } else {\n      throw 'type:' + type;\n    }\n  };\n\n  _this.getLostPoint = function(qrcode) {\n\n    const moduleCount = qrcode.getModuleCount();\n\n    let lostPoint = 0;\n\n    // LEVEL1\n\n    for (let row = 0; row < moduleCount; row += 1) {\n      for (let col = 0; col < moduleCount; col += 1) {\n\n        let sameCount = 0;\n        const dark = qrcode.isDark(row, col);\n\n        for (let r = -1; r <= 1; r += 1) {\n\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n\n          for (let c = -1; c <= 1; c += 1) {\n\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n\n            if (r == 0 && c == 0) {\n              continue;\n            }\n\n            if (dark == qrcode.isDark(row + r, col + c) ) {\n              sameCount += 1;\n            }\n          }\n        }\n\n        if (sameCount > 5) {\n          lostPoint += (3 + sameCount - 5);\n        }\n      }\n    };\n\n    // LEVEL2\n\n    for (let row = 0; row < moduleCount - 1; row += 1) {\n      for (let col = 0; col < moduleCount - 1; col += 1) {\n        let count = 0;\n        if (qrcode.isDark(row, col) ) count += 1;\n        if (qrcode.isDark(row + 1, col) ) count += 1;\n        if (qrcode.isDark(row, col + 1) ) count += 1;\n        if (qrcode.isDark(row + 1, col + 1) ) count += 1;\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    }\n\n    // LEVEL3\n\n    for (let row = 0; row < moduleCount; row += 1) {\n      for (let col = 0; col < moduleCount - 6; col += 1) {\n        if (qrcode.isDark(row, col)\n            && !qrcode.isDark(row, col + 1)\n            &&  qrcode.isDark(row, col + 2)\n            &&  qrcode.isDark(row, col + 3)\n            &&  qrcode.isDark(row, col + 4)\n            && !qrcode.isDark(row, col + 5)\n            &&  qrcode.isDark(row, col + 6) ) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    for (let col = 0; col < moduleCount; col += 1) {\n      for (let row = 0; row < moduleCount - 6; row += 1) {\n        if (qrcode.isDark(row, col)\n            && !qrcode.isDark(row + 1, col)\n            &&  qrcode.isDark(row + 2, col)\n            &&  qrcode.isDark(row + 3, col)\n            &&  qrcode.isDark(row + 4, col)\n            && !qrcode.isDark(row + 5, col)\n            &&  qrcode.isDark(row + 6, col) ) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    // LEVEL4\n\n    let darkCount = 0;\n\n    for (let col = 0; col < moduleCount; col += 1) {\n      for (let row = 0; row < moduleCount; row += 1) {\n        if (qrcode.isDark(row, col) ) {\n          darkCount += 1;\n        }\n      }\n    }\n\n    const ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n\n    return lostPoint;\n  };\n\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// QRMath\n//---------------------------------------------------------------------\n\nconst QRMath = function() {\n\n  const EXP_TABLE = new Array(256);\n  const LOG_TABLE = new Array(256);\n\n  // initialize tables\n  for (let i = 0; i < 8; i += 1) {\n    EXP_TABLE[i] = 1 << i;\n  }\n  for (let i = 8; i < 256; i += 1) {\n    EXP_TABLE[i] = EXP_TABLE[i - 4]\n      ^ EXP_TABLE[i - 5]\n      ^ EXP_TABLE[i - 6]\n      ^ EXP_TABLE[i - 8];\n  }\n  for (let i = 0; i < 255; i += 1) {\n    LOG_TABLE[EXP_TABLE[i] ] = i;\n  }\n\n  const _this = {};\n\n  _this.glog = function(n) {\n\n    if (n < 1) {\n      throw 'glog(' + n + ')';\n    }\n\n    return LOG_TABLE[n];\n  };\n\n  _this.gexp = function(n) {\n\n    while (n < 0) {\n      n += 255;\n    }\n\n    while (n >= 256) {\n      n -= 255;\n    }\n\n    return EXP_TABLE[n];\n  };\n\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// qrPolynomial\n//---------------------------------------------------------------------\n\nconst qrPolynomial = function(num, shift) {\n\n  if (typeof num.length == 'undefined') {\n    throw num.length + '/' + shift;\n  }\n\n  const _num = function() {\n    let offset = 0;\n    while (offset < num.length && num[offset] == 0) {\n      offset += 1;\n    }\n    const _num = new Array(num.length - offset + shift);\n    for (let i = 0; i < num.length - offset; i += 1) {\n      _num[i] = num[i + offset];\n    }\n    return _num;\n  }();\n\n  const _this = {};\n\n  _this.getAt = function(index) {\n    return _num[index];\n  };\n\n  _this.getLength = function() {\n    return _num.length;\n  };\n\n  _this.multiply = function(e) {\n\n    const num = new Array(_this.getLength() + e.getLength() - 1);\n\n    for (let i = 0; i < _this.getLength(); i += 1) {\n      for (let j = 0; j < e.getLength(); j += 1) {\n        num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i) ) + QRMath.glog(e.getAt(j) ) );\n      }\n    }\n\n    return qrPolynomial(num, 0);\n  };\n\n  _this.mod = function(e) {\n\n    if (_this.getLength() - e.getLength() < 0) {\n      return _this;\n    }\n\n    const ratio = QRMath.glog(_this.getAt(0) ) - QRMath.glog(e.getAt(0) );\n\n    const num = new Array(_this.getLength() );\n    for (let i = 0; i < _this.getLength(); i += 1) {\n      num[i] = _this.getAt(i);\n    }\n\n    for (let i = 0; i < e.getLength(); i += 1) {\n      num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i) ) + ratio);\n    }\n\n    // recursive call\n    return qrPolynomial(num, 0).mod(e);\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// QRRSBlock\n//---------------------------------------------------------------------\n\nconst QRRSBlock = function() {\n\n  const RS_BLOCK_TABLE = [\n\n    // L\n    // M\n    // Q\n    // H\n\n    // 1\n    [1, 26, 19],\n    [1, 26, 16],\n    [1, 26, 13],\n    [1, 26, 9],\n\n    // 2\n    [1, 44, 34],\n    [1, 44, 28],\n    [1, 44, 22],\n    [1, 44, 16],\n\n    // 3\n    [1, 70, 55],\n    [1, 70, 44],\n    [2, 35, 17],\n    [2, 35, 13],\n\n    // 4\n    [1, 100, 80],\n    [2, 50, 32],\n    [2, 50, 24],\n    [4, 25, 9],\n\n    // 5\n    [1, 134, 108],\n    [2, 67, 43],\n    [2, 33, 15, 2, 34, 16],\n    [2, 33, 11, 2, 34, 12],\n\n    // 6\n    [2, 86, 68],\n    [4, 43, 27],\n    [4, 43, 19],\n    [4, 43, 15],\n\n    // 7\n    [2, 98, 78],\n    [4, 49, 31],\n    [2, 32, 14, 4, 33, 15],\n    [4, 39, 13, 1, 40, 14],\n\n    // 8\n    [2, 121, 97],\n    [2, 60, 38, 2, 61, 39],\n    [4, 40, 18, 2, 41, 19],\n    [4, 40, 14, 2, 41, 15],\n\n    // 9\n    [2, 146, 116],\n    [3, 58, 36, 2, 59, 37],\n    [4, 36, 16, 4, 37, 17],\n    [4, 36, 12, 4, 37, 13],\n\n    // 10\n    [2, 86, 68, 2, 87, 69],\n    [4, 69, 43, 1, 70, 44],\n    [6, 43, 19, 2, 44, 20],\n    [6, 43, 15, 2, 44, 16],\n\n    // 11\n    [4, 101, 81],\n    [1, 80, 50, 4, 81, 51],\n    [4, 50, 22, 4, 51, 23],\n    [3, 36, 12, 8, 37, 13],\n\n    // 12\n    [2, 116, 92, 2, 117, 93],\n    [6, 58, 36, 2, 59, 37],\n    [4, 46, 20, 6, 47, 21],\n    [7, 42, 14, 4, 43, 15],\n\n    // 13\n    [4, 133, 107],\n    [8, 59, 37, 1, 60, 38],\n    [8, 44, 20, 4, 45, 21],\n    [12, 33, 11, 4, 34, 12],\n\n    // 14\n    [3, 145, 115, 1, 146, 116],\n    [4, 64, 40, 5, 65, 41],\n    [11, 36, 16, 5, 37, 17],\n    [11, 36, 12, 5, 37, 13],\n\n    // 15\n    [5, 109, 87, 1, 110, 88],\n    [5, 65, 41, 5, 66, 42],\n    [5, 54, 24, 7, 55, 25],\n    [11, 36, 12, 7, 37, 13],\n\n    // 16\n    [5, 122, 98, 1, 123, 99],\n    [7, 73, 45, 3, 74, 46],\n    [15, 43, 19, 2, 44, 20],\n    [3, 45, 15, 13, 46, 16],\n\n    // 17\n    [1, 135, 107, 5, 136, 108],\n    [10, 74, 46, 1, 75, 47],\n    [1, 50, 22, 15, 51, 23],\n    [2, 42, 14, 17, 43, 15],\n\n    // 18\n    [5, 150, 120, 1, 151, 121],\n    [9, 69, 43, 4, 70, 44],\n    [17, 50, 22, 1, 51, 23],\n    [2, 42, 14, 19, 43, 15],\n\n    // 19\n    [3, 141, 113, 4, 142, 114],\n    [3, 70, 44, 11, 71, 45],\n    [17, 47, 21, 4, 48, 22],\n    [9, 39, 13, 16, 40, 14],\n\n    // 20\n    [3, 135, 107, 5, 136, 108],\n    [3, 67, 41, 13, 68, 42],\n    [15, 54, 24, 5, 55, 25],\n    [15, 43, 15, 10, 44, 16],\n\n    // 21\n    [4, 144, 116, 4, 145, 117],\n    [17, 68, 42],\n    [17, 50, 22, 6, 51, 23],\n    [19, 46, 16, 6, 47, 17],\n\n    // 22\n    [2, 139, 111, 7, 140, 112],\n    [17, 74, 46],\n    [7, 54, 24, 16, 55, 25],\n    [34, 37, 13],\n\n    // 23\n    [4, 151, 121, 5, 152, 122],\n    [4, 75, 47, 14, 76, 48],\n    [11, 54, 24, 14, 55, 25],\n    [16, 45, 15, 14, 46, 16],\n\n    // 24\n    [6, 147, 117, 4, 148, 118],\n    [6, 73, 45, 14, 74, 46],\n    [11, 54, 24, 16, 55, 25],\n    [30, 46, 16, 2, 47, 17],\n\n    // 25\n    [8, 132, 106, 4, 133, 107],\n    [8, 75, 47, 13, 76, 48],\n    [7, 54, 24, 22, 55, 25],\n    [22, 45, 15, 13, 46, 16],\n\n    // 26\n    [10, 142, 114, 2, 143, 115],\n    [19, 74, 46, 4, 75, 47],\n    [28, 50, 22, 6, 51, 23],\n    [33, 46, 16, 4, 47, 17],\n\n    // 27\n    [8, 152, 122, 4, 153, 123],\n    [22, 73, 45, 3, 74, 46],\n    [8, 53, 23, 26, 54, 24],\n    [12, 45, 15, 28, 46, 16],\n\n    // 28\n    [3, 147, 117, 10, 148, 118],\n    [3, 73, 45, 23, 74, 46],\n    [4, 54, 24, 31, 55, 25],\n    [11, 45, 15, 31, 46, 16],\n\n    // 29\n    [7, 146, 116, 7, 147, 117],\n    [21, 73, 45, 7, 74, 46],\n    [1, 53, 23, 37, 54, 24],\n    [19, 45, 15, 26, 46, 16],\n\n    // 30\n    [5, 145, 115, 10, 146, 116],\n    [19, 75, 47, 10, 76, 48],\n    [15, 54, 24, 25, 55, 25],\n    [23, 45, 15, 25, 46, 16],\n\n    // 31\n    [13, 145, 115, 3, 146, 116],\n    [2, 74, 46, 29, 75, 47],\n    [42, 54, 24, 1, 55, 25],\n    [23, 45, 15, 28, 46, 16],\n\n    // 32\n    [17, 145, 115],\n    [10, 74, 46, 23, 75, 47],\n    [10, 54, 24, 35, 55, 25],\n    [19, 45, 15, 35, 46, 16],\n\n    // 33\n    [17, 145, 115, 1, 146, 116],\n    [14, 74, 46, 21, 75, 47],\n    [29, 54, 24, 19, 55, 25],\n    [11, 45, 15, 46, 46, 16],\n\n    // 34\n    [13, 145, 115, 6, 146, 116],\n    [14, 74, 46, 23, 75, 47],\n    [44, 54, 24, 7, 55, 25],\n    [59, 46, 16, 1, 47, 17],\n\n    // 35\n    [12, 151, 121, 7, 152, 122],\n    [12, 75, 47, 26, 76, 48],\n    [39, 54, 24, 14, 55, 25],\n    [22, 45, 15, 41, 46, 16],\n\n    // 36\n    [6, 151, 121, 14, 152, 122],\n    [6, 75, 47, 34, 76, 48],\n    [46, 54, 24, 10, 55, 25],\n    [2, 45, 15, 64, 46, 16],\n\n    // 37\n    [17, 152, 122, 4, 153, 123],\n    [29, 74, 46, 14, 75, 47],\n    [49, 54, 24, 10, 55, 25],\n    [24, 45, 15, 46, 46, 16],\n\n    // 38\n    [4, 152, 122, 18, 153, 123],\n    [13, 74, 46, 32, 75, 47],\n    [48, 54, 24, 14, 55, 25],\n    [42, 45, 15, 32, 46, 16],\n\n    // 39\n    [20, 147, 117, 4, 148, 118],\n    [40, 75, 47, 7, 76, 48],\n    [43, 54, 24, 22, 55, 25],\n    [10, 45, 15, 67, 46, 16],\n\n    // 40\n    [19, 148, 118, 6, 149, 119],\n    [18, 75, 47, 31, 76, 48],\n    [34, 54, 24, 34, 55, 25],\n    [20, 45, 15, 61, 46, 16]\n  ];\n\n  const qrRSBlock = function(totalCount, dataCount) {\n    const _this = {};\n    _this.totalCount = totalCount;\n    _this.dataCount = dataCount;\n    return _this;\n  };\n\n  const _this = {};\n\n  const getRsBlockTable = function(typeNumber, errorCorrectionLevel) {\n\n    switch(errorCorrectionLevel) {\n    case QRErrorCorrectionLevel.L :\n      return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n    case QRErrorCorrectionLevel.M :\n      return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n    case QRErrorCorrectionLevel.Q :\n      return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n    case QRErrorCorrectionLevel.H :\n      return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n    default :\n      return undefined;\n    }\n  };\n\n  _this.getRSBlocks = function(typeNumber, errorCorrectionLevel) {\n\n    const rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel);\n\n    if (typeof rsBlock == 'undefined') {\n      throw 'bad rs block @ typeNumber:' + typeNumber +\n          '/errorCorrectionLevel:' + errorCorrectionLevel;\n    }\n\n    const length = rsBlock.length / 3;\n\n    const list = [];\n\n    for (let i = 0; i < length; i += 1) {\n\n      const count = rsBlock[i * 3 + 0];\n      const totalCount = rsBlock[i * 3 + 1];\n      const dataCount = rsBlock[i * 3 + 2];\n\n      for (let j = 0; j < count; j += 1) {\n        list.push(qrRSBlock(totalCount, dataCount) );\n      }\n    }\n\n    return list;\n  };\n\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// qrBitBuffer\n//---------------------------------------------------------------------\n\nconst qrBitBuffer = function() {\n\n  const _buffer = [];\n  let _length = 0;\n\n  const _this = {};\n\n  _this.getBuffer = function() {\n    return _buffer;\n  };\n\n  _this.getAt = function(index) {\n    const bufIndex = Math.floor(index / 8);\n    return ( (_buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;\n  };\n\n  _this.put = function(num, length) {\n    for (let i = 0; i < length; i += 1) {\n      _this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);\n    }\n  };\n\n  _this.getLengthInBits = function() {\n    return _length;\n  };\n\n  _this.putBit = function(bit) {\n\n    const bufIndex = Math.floor(_length / 8);\n    if (_buffer.length <= bufIndex) {\n      _buffer.push(0);\n    }\n\n    if (bit) {\n      _buffer[bufIndex] |= (0x80 >>> (_length % 8) );\n    }\n\n    _length += 1;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrNumber\n//---------------------------------------------------------------------\n\nconst qrNumber = function(data) {\n\n  const _mode = QRMode.MODE_NUMBER;\n  const _data = data;\n\n  const _this = {};\n\n  _this.getMode = function() {\n    return _mode;\n  };\n\n  _this.getLength = function(buffer) {\n    return _data.length;\n  };\n\n  _this.write = function(buffer) {\n\n    const data = _data;\n\n    let i = 0;\n\n    while (i + 2 < data.length) {\n      buffer.put(strToNum(data.substring(i, i + 3) ), 10);\n      i += 3;\n    }\n\n    if (i < data.length) {\n      if (data.length - i == 1) {\n        buffer.put(strToNum(data.substring(i, i + 1) ), 4);\n      } else if (data.length - i == 2) {\n        buffer.put(strToNum(data.substring(i, i + 2) ), 7);\n      }\n    }\n  };\n\n  const strToNum = function(s) {\n    let num = 0;\n    for (let i = 0; i < s.length; i += 1) {\n      num = num * 10 + chatToNum(s.charAt(i) );\n    }\n    return num;\n  };\n\n  const chatToNum = function(c) {\n    if ('0' <= c && c <= '9') {\n      return c.charCodeAt(0) - '0'.charCodeAt(0);\n    }\n    throw 'illegal char :' + c;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrAlphaNum\n//---------------------------------------------------------------------\n\nconst qrAlphaNum = function(data) {\n\n  const _mode = QRMode.MODE_ALPHA_NUM;\n  const _data = data;\n\n  const _this = {};\n\n  _this.getMode = function() {\n    return _mode;\n  };\n\n  _this.getLength = function(buffer) {\n    return _data.length;\n  };\n\n  _this.write = function(buffer) {\n\n    const s = _data;\n\n    let i = 0;\n\n    while (i + 1 < s.length) {\n      buffer.put(\n        getCode(s.charAt(i) ) * 45 +\n        getCode(s.charAt(i + 1) ), 11);\n      i += 2;\n    }\n\n    if (i < s.length) {\n      buffer.put(getCode(s.charAt(i) ), 6);\n    }\n  };\n\n  const getCode = function(c) {\n\n    if ('0' <= c && c <= '9') {\n      return c.charCodeAt(0) - '0'.charCodeAt(0);\n    } else if ('A' <= c && c <= 'Z') {\n      return c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    } else {\n      switch (c) {\n      case '\\u0020' : return 36;\n      case '$' : return 37;\n      case '%' : return 38;\n      case '*' : return 39;\n      case '+' : return 40;\n      case '-' : return 41;\n      case '.' : return 42;\n      case '/' : return 43;\n      case ':' : return 44;\n      default :\n        throw 'illegal char :' + c;\n      }\n    }\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qr8BitByte\n//---------------------------------------------------------------------\n\nconst qr8BitByte = function(data) {\n\n  const _mode = QRMode.MODE_8BIT_BYTE;\n  const _data = data;\n  const _bytes = qrcode.stringToBytes(data);\n\n  const _this = {};\n\n  _this.getMode = function() {\n    return _mode;\n  };\n\n  _this.getLength = function(buffer) {\n    return _bytes.length;\n  };\n\n  _this.write = function(buffer) {\n    for (let i = 0; i < _bytes.length; i += 1) {\n      buffer.put(_bytes[i], 8);\n    }\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrKanji\n//---------------------------------------------------------------------\n\nconst qrKanji = function(data) {\n\n  const _mode = QRMode.MODE_KANJI;\n  const _data = data;\n\n  const stringToBytes = qrcode.stringToBytes;\n  !function(c, code) {\n    // self test for sjis support.\n    const test = stringToBytes(c);\n    if (test.length != 2 || ( (test[0] << 8) | test[1]) != code) {\n      throw 'sjis not supported.';\n    }\n  }('\\u53cb', 0x9746);\n\n  const _bytes = stringToBytes(data);\n\n  const _this = {};\n\n  _this.getMode = function() {\n    return _mode;\n  };\n\n  _this.getLength = function(buffer) {\n    return ~~(_bytes.length / 2);\n  };\n\n  _this.write = function(buffer) {\n\n    const data = _bytes;\n\n    let i = 0;\n\n    while (i + 1 < data.length) {\n\n      let c = ( (0xff & data[i]) << 8) | (0xff & data[i + 1]);\n\n      if (0x8140 <= c && c <= 0x9FFC) {\n        c -= 0x8140;\n      } else if (0xE040 <= c && c <= 0xEBBF) {\n        c -= 0xC140;\n      } else {\n        throw 'illegal char at ' + (i + 1) + '/' + c;\n      }\n\n      c = ( (c >>> 8) & 0xff) * 0xC0 + (c & 0xff);\n\n      buffer.put(c, 13);\n\n      i += 2;\n    }\n\n    if (i < data.length) {\n      throw 'illegal char at ' + (i + 1);\n    }\n  };\n\n  return _this;\n};\n\n//=====================================================================\n// GIF Support etc.\n//\n\n//---------------------------------------------------------------------\n// byteArrayOutputStream\n//---------------------------------------------------------------------\n\nconst byteArrayOutputStream = function() {\n\n  const _bytes = [];\n\n  const _this = {};\n\n  _this.writeByte = function(b) {\n    _bytes.push(b & 0xff);\n  };\n\n  _this.writeShort = function(i) {\n    _this.writeByte(i);\n    _this.writeByte(i >>> 8);\n  };\n\n  _this.writeBytes = function(b, off, len) {\n    off = off || 0;\n    len = len || b.length;\n    for (let i = 0; i < len; i += 1) {\n      _this.writeByte(b[i + off]);\n    }\n  };\n\n  _this.writeString = function(s) {\n    for (let i = 0; i < s.length; i += 1) {\n      _this.writeByte(s.charCodeAt(i) );\n    }\n  };\n\n  _this.toByteArray = function() {\n    return _bytes;\n  };\n\n  _this.toString = function() {\n    let s = '';\n    s += '[';\n    for (let i = 0; i < _bytes.length; i += 1) {\n      if (i > 0) {\n        s += ',';\n      }\n      s += _bytes[i];\n    }\n    s += ']';\n    return s;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// base64EncodeOutputStream\n//---------------------------------------------------------------------\n\nconst base64EncodeOutputStream = function() {\n\n  let _buffer = 0;\n  let _buflen = 0;\n  let _length = 0;\n  let _base64 = '';\n\n  const _this = {};\n\n  const writeEncoded = function(b) {\n    _base64 += String.fromCharCode(encode(b & 0x3f) );\n  };\n\n  const encode = function(n) {\n    if (n < 0) {\n      throw 'n:' + n;\n    } else if (n < 26) {\n      return 0x41 + n;\n    } else if (n < 52) {\n      return 0x61 + (n - 26);\n    } else if (n < 62) {\n      return 0x30 + (n - 52);\n    } else if (n == 62) {\n      return 0x2b;\n    } else if (n == 63) {\n      return 0x2f;\n    } else {\n      throw 'n:' + n;\n    }\n  };\n\n  _this.writeByte = function(n) {\n\n    _buffer = (_buffer << 8) | (n & 0xff);\n    _buflen += 8;\n    _length += 1;\n\n    while (_buflen >= 6) {\n      writeEncoded(_buffer >>> (_buflen - 6) );\n      _buflen -= 6;\n    }\n  };\n\n  _this.flush = function() {\n\n    if (_buflen > 0) {\n      writeEncoded(_buffer << (6 - _buflen) );\n      _buffer = 0;\n      _buflen = 0;\n    }\n\n    if (_length % 3 != 0) {\n      // padding\n      const padlen = 3 - _length % 3;\n      for (let i = 0; i < padlen; i += 1) {\n        _base64 += '=';\n      }\n    }\n  };\n\n  _this.toString = function() {\n    return _base64;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// base64DecodeInputStream\n//---------------------------------------------------------------------\n\nconst base64DecodeInputStream = function(str) {\n\n  const _str = str;\n  let _pos = 0;\n  let _buffer = 0;\n  let _buflen = 0;\n\n  const _this = {};\n\n  _this.read = function() {\n\n    while (_buflen < 8) {\n\n      if (_pos >= _str.length) {\n        if (_buflen == 0) {\n          return -1;\n        }\n        throw 'unexpected end of file./' + _buflen;\n      }\n\n      const c = _str.charAt(_pos);\n      _pos += 1;\n\n      if (c == '=') {\n        _buflen = 0;\n        return -1;\n      } else if (c.match(/^\\s$/) ) {\n        // ignore if whitespace.\n        continue;\n      }\n\n      _buffer = (_buffer << 6) | decode(c.charCodeAt(0) );\n      _buflen += 6;\n    }\n\n    const n = (_buffer >>> (_buflen - 8) ) & 0xff;\n    _buflen -= 8;\n    return n;\n  };\n\n  const decode = function(c) {\n    if (0x41 <= c && c <= 0x5a) {\n      return c - 0x41;\n    } else if (0x61 <= c && c <= 0x7a) {\n      return c - 0x61 + 26;\n    } else if (0x30 <= c && c <= 0x39) {\n      return c - 0x30 + 52;\n    } else if (c == 0x2b) {\n      return 62;\n    } else if (c == 0x2f) {\n      return 63;\n    } else {\n      throw 'c:' + c;\n    }\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// gifImage (B/W)\n//---------------------------------------------------------------------\n\nconst gifImage = function(width, height) {\n\n  const _width = width;\n  const _height = height;\n  const _data = new Array(width * height);\n\n  const _this = {};\n\n  _this.setPixel = function(x, y, pixel) {\n    _data[y * _width + x] = pixel;\n  };\n\n  _this.write = function(out) {\n\n    //---------------------------------\n    // GIF Signature\n\n    out.writeString('GIF87a');\n\n    //---------------------------------\n    // Screen Descriptor\n\n    out.writeShort(_width);\n    out.writeShort(_height);\n\n    out.writeByte(0x80); // 2bit\n    out.writeByte(0);\n    out.writeByte(0);\n\n    //---------------------------------\n    // Global Color Map\n\n    // black\n    out.writeByte(0x00);\n    out.writeByte(0x00);\n    out.writeByte(0x00);\n\n    // white\n    out.writeByte(0xff);\n    out.writeByte(0xff);\n    out.writeByte(0xff);\n\n    //---------------------------------\n    // Image Descriptor\n\n    out.writeString(',');\n    out.writeShort(0);\n    out.writeShort(0);\n    out.writeShort(_width);\n    out.writeShort(_height);\n    out.writeByte(0);\n\n    //---------------------------------\n    // Local Color Map\n\n    //---------------------------------\n    // Raster Data\n\n    const lzwMinCodeSize = 2;\n    const raster = getLZWRaster(lzwMinCodeSize);\n\n    out.writeByte(lzwMinCodeSize);\n\n    let offset = 0;\n\n    while (raster.length - offset > 255) {\n      out.writeByte(255);\n      out.writeBytes(raster, offset, 255);\n      offset += 255;\n    }\n\n    out.writeByte(raster.length - offset);\n    out.writeBytes(raster, offset, raster.length - offset);\n    out.writeByte(0x00);\n\n    //---------------------------------\n    // GIF Terminator\n    out.writeString(';');\n  };\n\n  const bitOutputStream = function(out) {\n\n    const _out = out;\n    let _bitLength = 0;\n    let _bitBuffer = 0;\n\n    const _this = {};\n\n    _this.write = function(data, length) {\n\n      if ( (data >>> length) != 0) {\n        throw 'length over';\n      }\n\n      while (_bitLength + length >= 8) {\n        _out.writeByte(0xff & ( (data << _bitLength) | _bitBuffer) );\n        length -= (8 - _bitLength);\n        data >>>= (8 - _bitLength);\n        _bitBuffer = 0;\n        _bitLength = 0;\n      }\n\n      _bitBuffer = (data << _bitLength) | _bitBuffer;\n      _bitLength = _bitLength + length;\n    };\n\n    _this.flush = function() {\n      if (_bitLength > 0) {\n        _out.writeByte(_bitBuffer);\n      }\n    };\n\n    return _this;\n  };\n\n  const getLZWRaster = function(lzwMinCodeSize) {\n\n    const clearCode = 1 << lzwMinCodeSize;\n    const endCode = (1 << lzwMinCodeSize) + 1;\n    let bitLength = lzwMinCodeSize + 1;\n\n    // Setup LZWTable\n    const table = lzwTable();\n\n    for (let i = 0; i < clearCode; i += 1) {\n      table.add(String.fromCharCode(i) );\n    }\n    table.add(String.fromCharCode(clearCode) );\n    table.add(String.fromCharCode(endCode) );\n\n    const byteOut = byteArrayOutputStream();\n    const bitOut = bitOutputStream(byteOut);\n\n    // clear code\n    bitOut.write(clearCode, bitLength);\n\n    let dataIndex = 0;\n\n    let s = String.fromCharCode(_data[dataIndex]);\n    dataIndex += 1;\n\n    while (dataIndex < _data.length) {\n\n      const c = String.fromCharCode(_data[dataIndex]);\n      dataIndex += 1;\n\n      if (table.contains(s + c) ) {\n\n        s = s + c;\n\n      } else {\n\n        bitOut.write(table.indexOf(s), bitLength);\n\n        if (table.size() < 0xfff) {\n\n          if (table.size() == (1 << bitLength) ) {\n            bitLength += 1;\n          }\n\n          table.add(s + c);\n        }\n\n        s = c;\n      }\n    }\n\n    bitOut.write(table.indexOf(s), bitLength);\n\n    // end code\n    bitOut.write(endCode, bitLength);\n\n    bitOut.flush();\n\n    return byteOut.toByteArray();\n  };\n\n  const lzwTable = function() {\n\n    const _map = {};\n    let _size = 0;\n\n    const _this = {};\n\n    _this.add = function(key) {\n      if (_this.contains(key) ) {\n        throw 'dup key:' + key;\n      }\n      _map[key] = _size;\n      _size += 1;\n    };\n\n    _this.size = function() {\n      return _size;\n    };\n\n    _this.indexOf = function(key) {\n      return _map[key];\n    };\n\n    _this.contains = function(key) {\n      return typeof _map[key] != 'undefined';\n    };\n\n    return _this;\n  };\n\n  return _this;\n};\n\nconst createDataURL = function(width, height, getPixel) {\n  const gif = gifImage(width, height);\n  for (let y = 0; y < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      gif.setPixel(x, y, getPixel(x, y) );\n    }\n  }\n\n  const b = byteArrayOutputStream();\n  gif.write(b);\n\n  const base64 = base64EncodeOutputStream();\n  const bytes = b.toByteArray();\n  for (let i = 0; i < bytes.length; i += 1) {\n    base64.writeByte(bytes[i]);\n  }\n  base64.flush();\n\n  return 'data:image/gif;base64,' + base64;\n};\n\nexport default qrcode;\n\nexport const stringToBytes = qrcode.stringToBytes;\n"],"mappings":"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,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EAEtB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EACb,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EAEtB;EACA,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EAEtB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,EACZ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EAEtB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,EACxB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACtB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EAEtB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG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ACA,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EAEvB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAC1B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAExB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAExB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAC1B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAExB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAExB;EACA,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAExB;EACA,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EACd,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAExB;EACA,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAExB;EACA,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EAEvB;EACA,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAExB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAEvB;EACA,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAExB;EACA,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EAC3B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACxB,CAAC,EAAE,EAAE,EA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}