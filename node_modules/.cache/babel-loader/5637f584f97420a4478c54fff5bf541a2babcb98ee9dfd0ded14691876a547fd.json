{"ast":null,"code":"// 应用配置\nconst config = {\n  // API 配置\n  api: {\n    baseURL: '',\n    adminPath: '',\n    timeout: 10000\n  },\n  // 应用配置\n  app: {\n    title: 'Star Share',\n    description: 'AI模型服务平台',\n    version: '1.0.0',\n    environment: process.env.NODE_ENV || 'development'\n  },\n  // 路由配置\n  routes: {\n    home: '/',\n    admin: '/admin',\n    adminLogin: '/admin/login'\n  },\n  // 存储配置\n  storage: {\n    tokenKey: 'admin_token',\n    userKey: 'admin_user'\n  },\n  // 业务配置\n  business: {\n    // 轮播图自动播放间隔 (毫秒)\n    carouselInterval: 3000,\n    // 分页默认大小\n    pageSize: 10,\n    // 上传文件最大大小 (MB)\n    maxFileSize: 10\n  },\n  // 外部链接配置\n  links: {\n    openPlatform: 'https://api.niceaigc.com/',\n    chatService: 'https://share.niceaigc.com/',\n    plusService: 'https://goplus.niceaigc.com/',\n    apiDocumentation: 'https://api.niceaigc.com/'\n  },\n  // 开发配置\n  development: {\n    enableMockAPI: false,\n    enableDebugMode: true,\n    logLevel: 'info'\n  }\n};\n\n// 导出配置\nexport default config;\n\n// 导出特定配置模块\nexport const {\n  api,\n  app,\n  routes,\n  storage,\n  business,\n  links,\n  development\n} = config;\n\n// 辅助函数：获取完整的API URL\nexport const getApiUrl = path => {\n  const baseUrl = api.baseURL.endsWith('/') ? api.baseURL.slice(0, -1) : api.baseURL;\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return `${baseUrl}${cleanPath}`;\n};\n\n// 辅助函数：获取完整的管理员API URL\nexport const getAdminApiUrl = path => {\n  const baseUrl = api.baseURL.endsWith('/') ? api.baseURL.slice(0, -1) : api.baseURL;\n  const adminPath = api.adminPath ? api.adminPath.startsWith('/') ? api.adminPath : `/${api.adminPath}` : '';\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return `${baseUrl}${adminPath}${cleanPath}`;\n};\n\n// 辅助函数：判断是否为开发环境\nexport const isDevelopment = () => {\n  return app.environment === 'development';\n};\n\n// 辅助函数：判断是否为生产环境\nexport const isProduction = () => {\n  return app.environment === 'production';\n};\n\n// 辅助函数：获取存储的token\nexport const getStoredToken = () => {\n  return localStorage.getItem(storage.tokenKey);\n};\n\n// 辅助函数：设置存储的token\nexport const setStoredToken = token => {\n  localStorage.setItem(storage.tokenKey, token);\n};\n\n// 辅助函数：清除存储的token\nexport const clearStoredToken = () => {\n  localStorage.removeItem(storage.tokenKey);\n  localStorage.removeItem(storage.userKey);\n};\n\n// 辅助函数：检查是否已登录\nexport const isAuthenticated = () => {\n  return !!getStoredToken();\n};","map":{"version":3,"names":["config","api","baseURL","adminPath","timeout","app","title","description","version","environment","process","env","NODE_ENV","routes","home","admin","adminLogin","storage","tokenKey","userKey","business","carouselInterval","pageSize","maxFileSize","links","openPlatform","chatService","plusService","apiDocumentation","development","enableMockAPI","enableDebugMode","logLevel","getApiUrl","path","baseUrl","endsWith","slice","cleanPath","startsWith","getAdminApiUrl","isDevelopment","isProduction","getStoredToken","localStorage","getItem","setStoredToken","token","setItem","clearStoredToken","removeItem","isAuthenticated"],"sources":["/opt/dev/star_share/web/src/config/index.ts"],"sourcesContent":["// 应用配置\nconst config = {\n  // API 配置\n  api: {\n    baseURL: '',\n    adminPath: '',\n    timeout: 10000,\n  },\n\n  // 应用配置\n  app: {\n    title: 'Star Share',\n    description: 'AI模型服务平台',\n    version: '1.0.0',\n    environment: process.env.NODE_ENV || 'development',\n  },\n\n  // 路由配置\n  routes: {\n    home: '/',\n    admin: '/admin',\n    adminLogin: '/admin/login',\n  },\n\n  // 存储配置\n  storage: {\n    tokenKey: 'admin_token',\n    userKey: 'admin_user',\n  },\n\n  // 业务配置\n  business: {\n    // 轮播图自动播放间隔 (毫秒)\n    carouselInterval: 3000,\n    // 分页默认大小\n    pageSize: 10,\n    // 上传文件最大大小 (MB)\n    maxFileSize: 10,\n  },\n\n  // 外部链接配置\n  links: {\n    openPlatform: 'https://api.niceaigc.com/',\n    chatService: 'https://share.niceaigc.com/',\n    plusService: 'https://goplus.niceaigc.com/',\n    apiDocumentation: 'https://api.niceaigc.com/',\n  },\n\n  // 开发配置\n  development: {\n    enableMockAPI: false,\n    enableDebugMode: true,\n    logLevel: 'info',\n  },\n};\n\n// 导出配置\nexport default config;\n\n// 导出特定配置模块\nexport const { api, app, routes, storage, business, links, development } = config;\n\n// 辅助函数：获取完整的API URL\nexport const getApiUrl = (path: string): string => {\n  const baseUrl = api.baseURL.endsWith('/') ? api.baseURL.slice(0, -1) : api.baseURL;\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return `${baseUrl}${cleanPath}`;\n};\n\n// 辅助函数：获取完整的管理员API URL\nexport const getAdminApiUrl = (path: string): string => {\n  const baseUrl = api.baseURL.endsWith('/') ? api.baseURL.slice(0, -1) : api.baseURL;\n  const adminPath = api.adminPath ? (api.adminPath.startsWith('/') ? api.adminPath : `/${api.adminPath}`) : '';\n  const cleanPath = path.startsWith('/') ? path : `/${path}`;\n  return `${baseUrl}${adminPath}${cleanPath}`;\n};\n\n// 辅助函数：判断是否为开发环境\nexport const isDevelopment = (): boolean => {\n  return app.environment === 'development';\n};\n\n// 辅助函数：判断是否为生产环境\nexport const isProduction = (): boolean => {\n  return app.environment === 'production';\n};\n\n// 辅助函数：获取存储的token\nexport const getStoredToken = (): string | null => {\n  return localStorage.getItem(storage.tokenKey);\n};\n\n// 辅助函数：设置存储的token\nexport const setStoredToken = (token: string): void => {\n  localStorage.setItem(storage.tokenKey, token);\n};\n\n// 辅助函数：清除存储的token\nexport const clearStoredToken = (): void => {\n  localStorage.removeItem(storage.tokenKey);\n  localStorage.removeItem(storage.userKey);\n};\n\n// 辅助函数：检查是否已登录\nexport const isAuthenticated = (): boolean => {\n  return !!getStoredToken();\n};"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAG;EACb;EACAC,GAAG,EAAE;IACHC,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE;EACX,CAAC;EAED;EACAC,GAAG,EAAE;IACHC,KAAK,EAAE,YAAY;IACnBC,WAAW,EAAE,UAAU;IACvBC,OAAO,EAAE,OAAO;IAChBC,WAAW,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAI;EACvC,CAAC;EAED;EACAC,MAAM,EAAE;IACNC,IAAI,EAAE,GAAG;IACTC,KAAK,EAAE,QAAQ;IACfC,UAAU,EAAE;EACd,CAAC;EAED;EACAC,OAAO,EAAE;IACPC,QAAQ,EAAE,aAAa;IACvBC,OAAO,EAAE;EACX,CAAC;EAED;EACAC,QAAQ,EAAE;IACR;IACAC,gBAAgB,EAAE,IAAI;IACtB;IACAC,QAAQ,EAAE,EAAE;IACZ;IACAC,WAAW,EAAE;EACf,CAAC;EAED;EACAC,KAAK,EAAE;IACLC,YAAY,EAAE,2BAA2B;IACzCC,WAAW,EAAE,6BAA6B;IAC1CC,WAAW,EAAE,8BAA8B;IAC3CC,gBAAgB,EAAE;EACpB,CAAC;EAED;EACAC,WAAW,EAAE;IACXC,aAAa,EAAE,KAAK;IACpBC,eAAe,EAAE,IAAI;IACrBC,QAAQ,EAAE;EACZ;AACF,CAAC;;AAED;AACA,eAAehC,MAAM;;AAErB;AACA,OAAO,MAAM;EAAEC,GAAG;EAAEI,GAAG;EAAEQ,MAAM;EAAEI,OAAO;EAAEG,QAAQ;EAAEI,KAAK;EAAEK;AAAY,CAAC,GAAG7B,MAAM;;AAEjF;AACA,OAAO,MAAMiC,SAAS,GAAIC,IAAY,IAAa;EACjD,MAAMC,OAAO,GAAGlC,GAAG,CAACC,OAAO,CAACkC,QAAQ,CAAC,GAAG,CAAC,GAAGnC,GAAG,CAACC,OAAO,CAACmC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGpC,GAAG,CAACC,OAAO;EAClF,MAAMoC,SAAS,GAAGJ,IAAI,CAACK,UAAU,CAAC,GAAG,CAAC,GAAGL,IAAI,GAAG,IAAIA,IAAI,EAAE;EAC1D,OAAO,GAAGC,OAAO,GAAGG,SAAS,EAAE;AACjC,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAIN,IAAY,IAAa;EACtD,MAAMC,OAAO,GAAGlC,GAAG,CAACC,OAAO,CAACkC,QAAQ,CAAC,GAAG,CAAC,GAAGnC,GAAG,CAACC,OAAO,CAACmC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGpC,GAAG,CAACC,OAAO;EAClF,MAAMC,SAAS,GAAGF,GAAG,CAACE,SAAS,GAAIF,GAAG,CAACE,SAAS,CAACoC,UAAU,CAAC,GAAG,CAAC,GAAGtC,GAAG,CAACE,SAAS,GAAG,IAAIF,GAAG,CAACE,SAAS,EAAE,GAAI,EAAE;EAC5G,MAAMmC,SAAS,GAAGJ,IAAI,CAACK,UAAU,CAAC,GAAG,CAAC,GAAGL,IAAI,GAAG,IAAIA,IAAI,EAAE;EAC1D,OAAO,GAAGC,OAAO,GAAGhC,SAAS,GAAGmC,SAAS,EAAE;AAC7C,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAGA,CAAA,KAAe;EAC1C,OAAOpC,GAAG,CAACI,WAAW,KAAK,aAAa;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMiC,YAAY,GAAGA,CAAA,KAAe;EACzC,OAAOrC,GAAG,CAACI,WAAW,KAAK,YAAY;AACzC,CAAC;;AAED;AACA,OAAO,MAAMkC,cAAc,GAAGA,CAAA,KAAqB;EACjD,OAAOC,YAAY,CAACC,OAAO,CAAC5B,OAAO,CAACC,QAAQ,CAAC;AAC/C,CAAC;;AAED;AACA,OAAO,MAAM4B,cAAc,GAAIC,KAAa,IAAW;EACrDH,YAAY,CAACI,OAAO,CAAC/B,OAAO,CAACC,QAAQ,EAAE6B,KAAK,CAAC;AAC/C,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAGA,CAAA,KAAY;EAC1CL,YAAY,CAACM,UAAU,CAACjC,OAAO,CAACC,QAAQ,CAAC;EACzC0B,YAAY,CAACM,UAAU,CAACjC,OAAO,CAACE,OAAO,CAAC;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMgC,eAAe,GAAGA,CAAA,KAAe;EAC5C,OAAO,CAAC,CAACR,cAAc,CAAC,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}