{"ast":null,"code":"/**\n * 通知提示工具函数\n * 提供统一的消息提示功能\n */// 简单的事件发射器\nclass ToastEmitter{constructor(){this.listeners=[];}subscribe(listener){this.listeners.push(listener);return()=>{this.listeners=this.listeners.filter(l=>l!==listener);};}emit(toast){this.listeners.forEach(listener=>listener(toast));}}const emitter=new ToastEmitter();// 生成唯一ID\nconst generateId=()=>Math.random().toString(36).substr(2,9);// 创建通知实例\nconst createToast=function(type,message){var _options$duration,_options$closable;let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return{id:generateId(),type,message,duration:(_options$duration=options.duration)!==null&&_options$duration!==void 0?_options$duration:3000,closable:(_options$closable=options.closable)!==null&&_options$closable!==void 0?_options$closable:true,timestamp:Date.now()};};// 通知方法\nexport const toast={success:(message,options)=>{const toastInstance=createToast('success',message,options);emitter.emit(toastInstance);return toastInstance.id;},error:(message,options)=>{const toastInstance=createToast('error',message,{duration:4000,...options});emitter.emit(toastInstance);return toastInstance.id;},warning:(message,options)=>{const toastInstance=createToast('warning',message,options);emitter.emit(toastInstance);return toastInstance.id;},info:(message,options)=>{const toastInstance=createToast('info',message,options);emitter.emit(toastInstance);return toastInstance.id;},// 订阅通知事件\nsubscribe:listener=>{return emitter.subscribe(listener);}};// Toast消息工具\nexport const showMessage={success:message=>{// 这里可以集成具体的toast库，暂时使用alert\nconsole.log('Success:',message);alert(message);},error:message=>{console.error('Error:',message);alert(`错误: ${message}`);},warning:message=>{console.warn('Warning:',message);alert(`警告: ${message}`);},info:message=>{console.log('Info:',message);alert(`信息: ${message}`);}};","map":{"version":3,"names":["ToastEmitter","constructor","listeners","subscribe","listener","push","filter","l","emit","toast","forEach","emitter","generateId","Math","random","toString","substr","createToast","type","message","_options$duration","_options$closable","options","arguments","length","undefined","id","duration","closable","timestamp","Date","now","success","toastInstance","error","warning","info","showMessage","console","log","alert","warn"],"sources":["/opt/dev/star_share/web/src/utils/toast.ts"],"sourcesContent":["/**\n * 通知提示工具函数\n * 提供统一的消息提示功能\n */\n\nexport interface ToastOptions {\n  /** 持续时间（毫秒） */\n  duration?: number;\n  /** 是否可关闭 */\n  closable?: boolean;\n  /** 自定义样式 */\n  className?: string;\n}\n\nexport interface ToastInstance {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n  duration: number;\n  closable: boolean;\n  timestamp: number;\n}\n\n// 简单的事件发射器\nclass ToastEmitter {\n  private listeners: Array<(toast: ToastInstance) => void> = [];\n\n  subscribe(listener: (toast: ToastInstance) => void) {\n    this.listeners.push(listener);\n    return () => {\n      this.listeners = this.listeners.filter(l => l !== listener);\n    };\n  }\n\n  emit(toast: ToastInstance) {\n    this.listeners.forEach(listener => listener(toast));\n  }\n}\n\nconst emitter = new ToastEmitter();\n\n// 生成唯一ID\nconst generateId = () => Math.random().toString(36).substr(2, 9);\n\n// 创建通知实例\nconst createToast = (\n  type: ToastInstance['type'],\n  message: string,\n  options: ToastOptions = {}\n): ToastInstance => ({\n  id: generateId(),\n  type,\n  message,\n  duration: options.duration ?? 3000,\n  closable: options.closable ?? true,\n  timestamp: Date.now()\n});\n\n// 通知方法\nexport const toast = {\n  success: (message: string, options?: ToastOptions) => {\n    const toastInstance = createToast('success', message, options);\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n\n  error: (message: string, options?: ToastOptions) => {\n    const toastInstance = createToast('error', message, { duration: 4000, ...options });\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n\n  warning: (message: string, options?: ToastOptions) => {\n    const toastInstance = createToast('warning', message, options);\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n\n  info: (message: string, options?: ToastOptions) => {\n    const toastInstance = createToast('info', message, options);\n    emitter.emit(toastInstance);\n    return toastInstance.id;\n  },\n\n  // 订阅通知事件\n  subscribe: (listener: (toast: ToastInstance) => void) => {\n    return emitter.subscribe(listener);\n  }\n};\n\n// Toast消息工具\nexport const showMessage = {\n  success: (message: string) => {\n    // 这里可以集成具体的toast库，暂时使用alert\n    console.log('Success:', message);\n    alert(message);\n  },\n  \n  error: (message: string) => {\n    console.error('Error:', message);\n    alert(`错误: ${message}`);\n  },\n  \n  warning: (message: string) => {\n    console.warn('Warning:', message);\n    alert(`警告: ${message}`);\n  },\n  \n  info: (message: string) => {\n    console.log('Info:', message);\n    alert(`信息: ${message}`);\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}