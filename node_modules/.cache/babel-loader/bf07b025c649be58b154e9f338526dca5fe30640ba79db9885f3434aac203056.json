{"ast":null,"code":"/**\n * Cookie管理工具函数\n */// 获取当前域名信息\nconst getCurrentDomain=()=>{const hostname=window.location.hostname;const parts=hostname.split('.');// 如果是IP地址或localhost，直接返回当前域名\nif(hostname==='localhost'||/^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname)){return{currentDomain:hostname,mainDomain:hostname};}// 获取主域名（最后两个部分，如 yy.com）\nconst mainDomain=parts.length>=2?parts.slice(-2).join('.'):hostname;return{currentDomain:hostname,mainDomain:mainDomain};};// 删除指定域名下的所有cookie\nconst clearCookiesForDomain=domain=>{const cookies=document.cookie.split(';');for(let cookie of cookies){const eqPos=cookie.indexOf('=');const name=eqPos>-1?cookie.substr(0,eqPos).trim():cookie.trim();if(name){// 尝试多种删除方式，确保彻底清除\nconst expireDate='Thu, 01 Jan 1970 00:00:00 GMT';// 1. 删除当前域名，根路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=/`;// 2. 删除当前域名，当前路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=${window.location.pathname}`;// 3. 删除指定域名，根路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=${domain}`;// 4. 删除指定域名前缀点，根路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=.${domain}`;// 5. 删除当前完整域名\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=${window.location.hostname}`;// 6. 删除当前完整域名前缀点\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=.${window.location.hostname}`;// 7. 尝试删除所有可能的路径组合\nconst pathParts=window.location.pathname.split('/').filter(part=>part);let currentPath='';for(const part of pathParts){currentPath+=`/${part}`;document.cookie=`${name}=; expires=${expireDate}; path=${currentPath}`;document.cookie=`${name}=; expires=${expireDate}; path=${currentPath}; domain=${domain}`;document.cookie=`${name}=; expires=${expireDate}; path=${currentPath}; domain=.${domain}`;}}}};// 彻底清除所有相关域名的cookie（超强版）\nconst clearAllRelatedCookies=(currentDomain,mainDomain)=>{try{console.log('🍪 当前所有cookies:',document.cookie);// 获取当前所有cookie名称\nconst cookies=document.cookie.split(';');const cookieNames=cookies.map(cookie=>{const name=cookie.split('=')[0].trim();return name;}).filter(name=>name);console.log('🍪 发现的cookie名称:',cookieNames);// 对每个cookie进行暴力删除，尝试所有可能的组合\ncookieNames.forEach(cookieName=>{if(cookieName){console.log(`🗑️ 正在删除cookie: ${cookieName}`);// 1. 基础删除（无domain）\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;// 2. 删除主域名的cookie\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com`;// 3. 删除.主域名的cookie (这个是关键！)\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;// 4. 删除当前完整域名\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;// 5. 删除.当前完整域名\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${window.location.hostname}`;// 6. 带secure属性的删除\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; secure`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com; secure`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com; secure`;// 7. 不同路径的删除\nconst paths=['/','',window.location.pathname];paths.forEach(path=>{document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=${path}`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=${path}; domain=niceaigc.com`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=${path}; domain=.niceaigc.com`;});}});// 等待一下让删除操作生效\nconst start=Date.now();while(Date.now()-start<50){/* 等待50ms */}// 额外保险：再次删除常见的认证cookie\nconst criticalCookies=['xuserid','xtoken','cas_access_token','access_token','refresh_token','user_session','auth_token','session_id','JSESSIONID','sessionid','authToken','userToken','loginToken'];criticalCookies.forEach(cookieName=>{// 多种删除方式确保清除\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${window.location.hostname}`;});// 再等待一下\nconst start2=Date.now();while(Date.now()-start2<50){/* 等待50ms */}console.log('🍪 清理后剩余cookies:',document.cookie);// 如果还有cookie，再进行一轮强制清理\nif(document.cookie.trim()){console.log('⚠️ 发现残留cookie，进行强制清理');const remainingCookies=document.cookie.split(';');remainingCookies.forEach(cookie=>{const cookieName=cookie.split('=')[0].trim();if(cookieName){// 超级暴力删除\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=; domain=.niceaigc.com`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; domain=.niceaigc.com`;// 尝试空值设置\ndocument.cookie=`${cookieName}=; max-age=0; path=/; domain=.niceaigc.com`;document.cookie=`${cookieName}=; max-age=0; path=/; domain=niceaigc.com`;}});}console.log('🍪 最终剩余cookies:',document.cookie);}catch(error){console.error('❌ Cookie清理过程出错:',error);// 应急清理\ntry{const allCookies=document.cookie.split(';');allCookies.forEach(cookie=>{const cookieName=cookie.split('=')[0].trim();if(cookieName){document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;}});}catch(basicError){console.error('❌ 应急清理也失败:',basicError);}}};// 检测是否在iframe中\nconst isInIframe=()=>{try{return window.self!==window.top;}catch(e){return true;// 如果无法访问top，说明在iframe中\n}};// 通知父页面删除cookie\nconst notifyParentToDeleteCookies=()=>{try{if(window.parent&&window.parent!==window){window.parent.postMessage({action:'deleteCookies',domain:'.niceaigc.com',cookies:document.cookie.split(';').map(c=>c.split('=')[0].trim()).filter(name=>name)},'*');console.log('📤 已通知父页面删除cookies');}}catch(e){console.warn('⚠️ 无法通知父页面删除cookies:',e);}};// 退出登录功能（强化版）\nexport const logout=async()=>{console.log('🚀 开始执行logout流程');// 检测iframe环境\nconst inIframe=isInIframe();console.log('🖼️ 是否在iframe中:',inIframe);try{const{currentDomain,mainDomain}=getCurrentDomain();console.log('📍 域名信息:',{currentDomain,mainDomain});// 在清除cookie之前先获取cas_access_token\nconst casAccessToken=getCookie('cas_access_token');console.log('🔑 获取到的cas_access_token:',casAccessToken?'存在':'不存在');try{// 动态导入 postMessage 工具（避免循环依赖）\nconsole.log('📞 准备发送postMessage通知');const{notifyLogout}=await import('./postMessage');// 先发送退出登录通知到父页面，自动获取当前页面地址\nnotifyLogout();console.log('✅ postMessage通知发送完成');// 等待一小段时间确保消息发送完成\nawait new Promise(resolve=>setTimeout(resolve,100));}catch(postMessageError){console.warn('⚠️ postMessage发送失败，继续执行清理:',postMessageError);// 不让postMessage错误中断整个流程\n}// 清除localStorage和sessionStorage\nconsole.log('🗑️ 开始清除本地存储');try{localStorage.clear();sessionStorage.clear();console.log('✅ 本地存储清除完成');}catch(storageError){console.error('❌ 本地存储清除失败:',storageError);}// 如果在iframe中，先通知父页面删除cookie\nif(inIframe){console.log('🖼️ 检测到iframe环境，通知父页面删除cookies');notifyParentToDeleteCookies();// 等待一下让父页面有时间处理\nawait new Promise(resolve=>setTimeout(resolve,200));}// 彻底清除所有相关域名的cookie\nconsole.log('🍪 开始清除cookies');try{console.log('🍪 清除前的cookies:',document.cookie);clearAllRelatedCookies(currentDomain,mainDomain);console.log('🍪 清除后的cookies:',document.cookie);console.log('✅ Cookie清除完成');}catch(cookieError){console.error('❌ Cookie清除失败:',cookieError);}// 如果在iframe中且仍有cookie残留，再次通知父页面\nif(inIframe&&document.cookie.trim()){console.log('🖼️ iframe中仍有cookie残留，再次通知父页面');notifyParentToDeleteCookies();await new Promise(resolve=>setTimeout(resolve,300));}// 确定最终跳转地址\nlet redirectUri;if(currentDomain!==mainDomain){// 当前是子域名，跳转到主域名\nredirectUri=`${window.location.protocol}//${mainDomain}`;}else{// 当前是主域名，跳转到根路径\nredirectUri=`${window.location.protocol}//${currentDomain}/`;}console.log('🔗 重定向URI:',redirectUri);// 构造Casdoor logout URL\nlet casdoorLogoutUrl=`https://casdoor.niceaigc.com/api/logout?post_logout_redirect_uri=${encodeURIComponent(redirectUri)}`;// 如果有cas_access_token，添加id_token_hint参数\nif(casAccessToken){casdoorLogoutUrl+=`&id_token_hint=${encodeURIComponent(casAccessToken)}`;}console.log('🎯 最终跳转URL:',casdoorLogoutUrl);// 如果在iframe中，需要特殊处理跳转\nif(inIframe){console.log('🖼️ iframe环境，通知父页面跳转');try{// 通知父页面进行跳转\nwindow.parent.postMessage({action:'logout_redirect',url:casdoorLogoutUrl},'*');// 也尝试直接跳转（作为备用）\nsetTimeout(()=>{window.location.href=casdoorLogoutUrl;},500);}catch(e){console.warn('⚠️ 无法通知父页面跳转，直接跳转');window.location.href=casdoorLogoutUrl;}}else{// 强制等待一下，确保所有操作完成\nawait new Promise(resolve=>setTimeout(resolve,200));console.log('🚀 准备跳转到Casdoor');// 跳转到Casdoor logout接口\nwindow.location.href=casdoorLogoutUrl;}}catch(error){console.error('❌ logout函数执行失败:',error);// 如果全流程失败，至少执行基础清理\nconsole.log('🛡️ 执行应急清理');try{localStorage.clear();sessionStorage.clear();// 基础cookie清理\nconst cookies=document.cookie.split(';');cookies.forEach(cookie=>{const cookieName=cookie.split('=')[0].trim();if(cookieName){document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;}});console.log('🛡️ 应急清理完成，强制跳转到主页');// 应急跳转\nif(inIframe){window.parent.postMessage({action:'logout_redirect',url:'https://niceaigc.com/'},'*');}window.location.href='https://niceaigc.com/';}catch(emergencyError){console.error('❌ 应急清理也失败了:',emergencyError);// 最后的手段\nalert('退出登录时发生错误，请手动清除浏览器缓存或刷新页面');}}};// 获取cookie值\nexport const getCookie=name=>{const value=`; ${document.cookie}`;const parts=value.split(`; ${name}=`);if(parts.length===2){var _parts$pop;return((_parts$pop=parts.pop())===null||_parts$pop===void 0?void 0:_parts$pop.split(';').shift())||null;}return null;};// 检查是否已登录\nexport const isAuthenticated=()=>{const xuserid=getCookie('xuserid');const xtoken=getCookie('xtoken');return!!(xuserid&&xtoken);};","map":{"version":3,"names":["getCurrentDomain","hostname","window","location","parts","split","test","currentDomain","mainDomain","length","slice","join","clearCookiesForDomain","domain","cookies","document","cookie","eqPos","indexOf","name","substr","trim","expireDate","pathname","pathParts","filter","part","currentPath","clearAllRelatedCookies","console","log","cookieNames","map","forEach","cookieName","paths","path","start","Date","now","criticalCookies","start2","remainingCookies","error","allCookies","basicError","isInIframe","self","top","e","notifyParentToDeleteCookies","parent","postMessage","action","c","warn","logout","inIframe","casAccessToken","getCookie","notifyLogout","Promise","resolve","setTimeout","postMessageError","localStorage","clear","sessionStorage","storageError","cookieError","redirectUri","protocol","casdoorLogoutUrl","encodeURIComponent","url","href","emergencyError","alert","value","_parts$pop","pop","shift","isAuthenticated","xuserid","xtoken"],"sources":["/opt/dev/star_share/web/src/utils/cookieUtils.ts"],"sourcesContent":["/**\n * Cookie管理工具函数\n */\n\n// 获取当前域名信息\nconst getCurrentDomain = (): { currentDomain: string; mainDomain: string } => {\n  const hostname = window.location.hostname;\n  const parts = hostname.split('.');\n\n  // 如果是IP地址或localhost，直接返回当前域名\n  if (hostname === 'localhost' || /^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname)) {\n    return {\n      currentDomain: hostname,\n      mainDomain: hostname\n    };\n  }\n\n  // 获取主域名（最后两个部分，如 yy.com）\n  const mainDomain = parts.length >= 2 ? parts.slice(-2).join('.') : hostname;\n\n  return {\n    currentDomain: hostname,\n    mainDomain: mainDomain\n  };\n};\n\n// 删除指定域名下的所有cookie\nconst clearCookiesForDomain = (domain: string): void => {\n  const cookies = document.cookie.split(';');\n\n  for (let cookie of cookies) {\n    const eqPos = cookie.indexOf('=');\n    const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();\n\n    if (name) {\n      // 尝试多种删除方式，确保彻底清除\n      const expireDate = 'Thu, 01 Jan 1970 00:00:00 GMT';\n\n      // 1. 删除当前域名，根路径\n      document.cookie = `${name}=; expires=${expireDate}; path=/`;\n\n      // 2. 删除当前域名，当前路径\n      document.cookie = `${name}=; expires=${expireDate}; path=${window.location.pathname}`;\n\n      // 3. 删除指定域名，根路径\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=${domain}`;\n\n      // 4. 删除指定域名前缀点，根路径\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=.${domain}`;\n\n      // 5. 删除当前完整域名\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=${window.location.hostname}`;\n\n      // 6. 删除当前完整域名前缀点\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=.${window.location.hostname}`;\n\n      // 7. 尝试删除所有可能的路径组合\n      const pathParts = window.location.pathname.split('/').filter(part => part);\n      let currentPath = '';\n      for (const part of pathParts) {\n        currentPath += `/${part}`;\n        document.cookie = `${name}=; expires=${expireDate}; path=${currentPath}`;\n        document.cookie = `${name}=; expires=${expireDate}; path=${currentPath}; domain=${domain}`;\n        document.cookie = `${name}=; expires=${expireDate}; path=${currentPath}; domain=.${domain}`;\n      }\n    }\n  }\n};\n\n// 彻底清除所有相关域名的cookie（超强版）\nconst clearAllRelatedCookies = (currentDomain: string, mainDomain: string): void => {\n  try {\n    console.log('🍪 当前所有cookies:', document.cookie);\n\n    // 获取当前所有cookie名称\n    const cookies = document.cookie.split(';');\n    const cookieNames = cookies.map(cookie => {\n      const name = cookie.split('=')[0].trim();\n      return name;\n    }).filter(name => name);\n\n    console.log('🍪 发现的cookie名称:', cookieNames);\n\n    // 对每个cookie进行暴力删除，尝试所有可能的组合\n    cookieNames.forEach(cookieName => {\n      if (cookieName) {\n        console.log(`🗑️ 正在删除cookie: ${cookieName}`);\n\n        // 1. 基础删除（无domain）\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n\n        // 2. 删除主域名的cookie\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com`;\n\n        // 3. 删除.主域名的cookie (这个是关键！)\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;\n\n        // 4. 删除当前完整域名\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;\n\n        // 5. 删除.当前完整域名\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${window.location.hostname}`;\n\n        // 6. 带secure属性的删除\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; secure`;\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com; secure`;\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com; secure`;\n\n        // 7. 不同路径的删除\n        const paths = ['/', '', window.location.pathname];\n        paths.forEach(path => {\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=${path}`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=${path}; domain=niceaigc.com`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=${path}; domain=.niceaigc.com`;\n        });\n      }\n    });\n\n    // 等待一下让删除操作生效\n    const start = Date.now();\n    while (Date.now() - start < 50) { /* 等待50ms */ }\n\n    // 额外保险：再次删除常见的认证cookie\n    const criticalCookies = [\n      'xuserid', 'xtoken', 'cas_access_token', 'access_token', 'refresh_token',\n      'user_session', 'auth_token', 'session_id', 'JSESSIONID', 'sessionid',\n      'authToken', 'userToken', 'loginToken'\n    ];\n\n    criticalCookies.forEach(cookieName => {\n      // 多种删除方式确保清除\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com`;\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;\n      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${window.location.hostname}`;\n    });\n\n    // 再等待一下\n    const start2 = Date.now();\n    while (Date.now() - start2 < 50) { /* 等待50ms */ }\n\n    console.log('🍪 清理后剩余cookies:', document.cookie);\n\n    // 如果还有cookie，再进行一轮强制清理\n    if (document.cookie.trim()) {\n      console.log('⚠️ 发现残留cookie，进行强制清理');\n      const remainingCookies = document.cookie.split(';');\n      remainingCookies.forEach(cookie => {\n        const cookieName = cookie.split('=')[0].trim();\n        if (cookieName) {\n          // 超级暴力删除\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=niceaigc.com`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=; domain=.niceaigc.com`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; domain=.niceaigc.com`;\n\n          // 尝试空值设置\n          document.cookie = `${cookieName}=; max-age=0; path=/; domain=.niceaigc.com`;\n          document.cookie = `${cookieName}=; max-age=0; path=/; domain=niceaigc.com`;\n        }\n      });\n    }\n\n    console.log('🍪 最终剩余cookies:', document.cookie);\n\n  } catch (error) {\n    console.error('❌ Cookie清理过程出错:', error);\n    // 应急清理\n    try {\n      const allCookies = document.cookie.split(';');\n      allCookies.forEach(cookie => {\n        const cookieName = cookie.split('=')[0].trim();\n        if (cookieName) {\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;\n        }\n      });\n    } catch (basicError) {\n      console.error('❌ 应急清理也失败:', basicError);\n    }\n  }\n};\n\n// 检测是否在iframe中\nconst isInIframe = (): boolean => {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true; // 如果无法访问top，说明在iframe中\n  }\n};\n\n// 通知父页面删除cookie\nconst notifyParentToDeleteCookies = (): void => {\n  try {\n    if (window.parent && window.parent !== window) {\n      window.parent.postMessage({\n        action: 'deleteCookies',\n        domain: '.niceaigc.com',\n        cookies: document.cookie.split(';').map(c => c.split('=')[0].trim()).filter(name => name)\n      }, '*');\n      console.log('📤 已通知父页面删除cookies');\n    }\n  } catch (e) {\n    console.warn('⚠️ 无法通知父页面删除cookies:', e);\n  }\n};\n\n// 退出登录功能（强化版）\nexport const logout = async (): Promise<void> => {\n  console.log('🚀 开始执行logout流程');\n\n  // 检测iframe环境\n  const inIframe = isInIframe();\n  console.log('🖼️ 是否在iframe中:', inIframe);\n\n  try {\n    const { currentDomain, mainDomain } = getCurrentDomain();\n    console.log('📍 域名信息:', { currentDomain, mainDomain });\n\n    // 在清除cookie之前先获取cas_access_token\n    const casAccessToken = getCookie('cas_access_token');\n    console.log('🔑 获取到的cas_access_token:', casAccessToken ? '存在' : '不存在');\n\n    try {\n      // 动态导入 postMessage 工具（避免循环依赖）\n      console.log('📞 准备发送postMessage通知');\n      const { notifyLogout } = await import('./postMessage');\n\n      // 先发送退出登录通知到父页面，自动获取当前页面地址\n      notifyLogout();\n      console.log('✅ postMessage通知发送完成');\n\n      // 等待一小段时间确保消息发送完成\n      await new Promise(resolve => setTimeout(resolve, 100));\n    } catch (postMessageError) {\n      console.warn('⚠️ postMessage发送失败，继续执行清理:', postMessageError);\n      // 不让postMessage错误中断整个流程\n    }\n\n    // 清除localStorage和sessionStorage\n    console.log('🗑️ 开始清除本地存储');\n    try {\n      localStorage.clear();\n      sessionStorage.clear();\n      console.log('✅ 本地存储清除完成');\n    } catch (storageError) {\n      console.error('❌ 本地存储清除失败:', storageError);\n    }\n\n    // 如果在iframe中，先通知父页面删除cookie\n    if (inIframe) {\n      console.log('🖼️ 检测到iframe环境，通知父页面删除cookies');\n      notifyParentToDeleteCookies();\n      // 等待一下让父页面有时间处理\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n\n    // 彻底清除所有相关域名的cookie\n    console.log('🍪 开始清除cookies');\n    try {\n      console.log('🍪 清除前的cookies:', document.cookie);\n      clearAllRelatedCookies(currentDomain, mainDomain);\n      console.log('🍪 清除后的cookies:', document.cookie);\n      console.log('✅ Cookie清除完成');\n    } catch (cookieError) {\n      console.error('❌ Cookie清除失败:', cookieError);\n    }\n\n    // 如果在iframe中且仍有cookie残留，再次通知父页面\n    if (inIframe && document.cookie.trim()) {\n      console.log('🖼️ iframe中仍有cookie残留，再次通知父页面');\n      notifyParentToDeleteCookies();\n      await new Promise(resolve => setTimeout(resolve, 300));\n    }\n\n    // 确定最终跳转地址\n    let redirectUri: string;\n    if (currentDomain !== mainDomain) {\n      // 当前是子域名，跳转到主域名\n      redirectUri = `${window.location.protocol}//${mainDomain}`;\n    } else {\n      // 当前是主域名，跳转到根路径\n      redirectUri = `${window.location.protocol}//${currentDomain}/`;\n    }\n    console.log('🔗 重定向URI:', redirectUri);\n\n    // 构造Casdoor logout URL\n    let casdoorLogoutUrl = `https://casdoor.niceaigc.com/api/logout?post_logout_redirect_uri=${encodeURIComponent(redirectUri)}`;\n\n    // 如果有cas_access_token，添加id_token_hint参数\n    if (casAccessToken) {\n      casdoorLogoutUrl += `&id_token_hint=${encodeURIComponent(casAccessToken)}`;\n    }\n\n    console.log('🎯 最终跳转URL:', casdoorLogoutUrl);\n\n    // 如果在iframe中，需要特殊处理跳转\n    if (inIframe) {\n      console.log('🖼️ iframe环境，通知父页面跳转');\n      try {\n        // 通知父页面进行跳转\n        window.parent.postMessage({\n          action: 'logout_redirect',\n          url: casdoorLogoutUrl\n        }, '*');\n\n        // 也尝试直接跳转（作为备用）\n        setTimeout(() => {\n          window.location.href = casdoorLogoutUrl;\n        }, 500);\n      } catch (e) {\n        console.warn('⚠️ 无法通知父页面跳转，直接跳转');\n        window.location.href = casdoorLogoutUrl;\n      }\n    } else {\n      // 强制等待一下，确保所有操作完成\n      await new Promise(resolve => setTimeout(resolve, 200));\n      console.log('🚀 准备跳转到Casdoor');\n      // 跳转到Casdoor logout接口\n      window.location.href = casdoorLogoutUrl;\n    }\n\n  } catch (error) {\n    console.error('❌ logout函数执行失败:', error);\n\n    // 如果全流程失败，至少执行基础清理\n    console.log('🛡️ 执行应急清理');\n    try {\n      localStorage.clear();\n      sessionStorage.clear();\n\n      // 基础cookie清理\n      const cookies = document.cookie.split(';');\n      cookies.forEach(cookie => {\n        const cookieName = cookie.split('=')[0].trim();\n        if (cookieName) {\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.niceaigc.com`;\n        }\n      });\n\n      console.log('🛡️ 应急清理完成，强制跳转到主页');\n      // 应急跳转\n      if (inIframe) {\n        window.parent.postMessage({ action: 'logout_redirect', url: 'https://niceaigc.com/' }, '*');\n      }\n      window.location.href = 'https://niceaigc.com/';\n    } catch (emergencyError) {\n      console.error('❌ 应急清理也失败了:', emergencyError);\n      // 最后的手段\n      alert('退出登录时发生错误，请手动清除浏览器缓存或刷新页面');\n    }\n  }\n};\n\n// 获取cookie值\nexport const getCookie = (name: string): string | null => {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) {\n    return parts.pop()?.split(';').shift() || null;\n  }\n  return null;\n};\n\n// 检查是否已登录\nexport const isAuthenticated = (): boolean => {\n  const xuserid = getCookie('xuserid');\n  const xtoken = getCookie('xtoken');\n  return !!(xuserid && xtoken);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}