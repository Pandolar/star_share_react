{"ast":null,"code":"/**\n * Cookie管理工具函数\n */// 获取当前域名信息\nconst getCurrentDomain=()=>{const hostname=window.location.hostname;const parts=hostname.split('.');// 如果是IP地址或localhost，直接返回当前域名\nif(hostname==='localhost'||/^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname)){return{currentDomain:hostname,mainDomain:hostname};}// 获取主域名（最后两个部分，如 yy.com）\nconst mainDomain=parts.length>=2?parts.slice(-2).join('.'):hostname;return{currentDomain:hostname,mainDomain:mainDomain};};// 删除指定域名下的所有cookie\nconst clearCookiesForDomain=domain=>{const cookies=document.cookie.split(';');for(let cookie of cookies){const eqPos=cookie.indexOf('=');const name=eqPos>-1?cookie.substr(0,eqPos).trim():cookie.trim();if(name){// 尝试多种删除方式，确保彻底清除\nconst expireDate='Thu, 01 Jan 1970 00:00:00 GMT';// 1. 删除当前域名，根路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=/`;// 2. 删除当前域名，当前路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=${window.location.pathname}`;// 3. 删除指定域名，根路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=${domain}`;// 4. 删除指定域名前缀点，根路径\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=.${domain}`;// 5. 删除当前完整域名\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=${window.location.hostname}`;// 6. 删除当前完整域名前缀点\ndocument.cookie=`${name}=; expires=${expireDate}; path=/; domain=.${window.location.hostname}`;// 7. 尝试删除所有可能的路径组合\nconst pathParts=window.location.pathname.split('/').filter(part=>part);let currentPath='';for(const part of pathParts){currentPath+=`/${part}`;document.cookie=`${name}=; expires=${expireDate}; path=${currentPath}`;document.cookie=`${name}=; expires=${expireDate}; path=${currentPath}; domain=${domain}`;document.cookie=`${name}=; expires=${expireDate}; path=${currentPath}; domain=.${domain}`;}}}};// 彻底清除所有相关域名的cookie\nconst clearAllRelatedCookies=(currentDomain,mainDomain)=>{// 获取所有可能的域名变体\nconst domainsToClean=[currentDomain,mainDomain,window.location.hostname];// 特别处理：确保包含带点前缀的主域名\ndomainsToClean.push(`.${currentDomain}`);domainsToClean.push(`.${mainDomain}`);domainsToClean.push(`.${window.location.hostname}`);// 如果是子域名，还要清理父域名\nconst hostnameParts=window.location.hostname.split('.');if(hostnameParts.length>2){// 只有当确实是子域名时才处理父域名\nfor(let i=1;i<hostnameParts.length-1;i++){// 避免添加顶级域名如.com\nconst parentDomain=hostnameParts.slice(i).join('.');domainsToClean.push(parentDomain);domainsToClean.push(`.${parentDomain}`);}}// 去重\nconst uniqueDomains=Array.from(new Set(domainsToClean));console.log('准备清理的域名:',uniqueDomains);// 调试日志\n// 多轮清理，确保彻底\nfor(let round=0;round<3;round++){// 逐个清理每个域名\nuniqueDomains.forEach(domain=>{clearCookiesForDomain(domain);});// 额外的彻底清理：直接遍历所有cookie名称进行删除\nconst allCookies=document.cookie.split(';');allCookies.forEach(cookie=>{const cookieName=cookie.split('=')[0].trim();if(cookieName){// 对每个cookie名称尝试所有可能的删除组合\nuniqueDomains.forEach(domain=>{// 基础删除\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}`;// 带secure标志的删除\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; secure`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; secure`;// 带SameSite的删除\ndocument.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; SameSite=Strict`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; SameSite=Lax`;document.cookie=`${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; SameSite=None; Secure`;});}});// 短暂延迟，让浏览器处理删除操作\nif(round<2){// 同步延迟（不推荐但对cookie删除有效）\nconst start=Date.now();while(Date.now()-start<10){/* 等待10ms */}}}console.log('清理后剩余cookie:',document.cookie);// 调试日志\n};// 退出登录功能（简化版）\nexport const logout=async()=>{const{currentDomain,mainDomain}=getCurrentDomain();// 在清除cookie之前先获取cas_access_token\nconst casAccessToken=getCookie('cas_access_token');// 动态导入 postMessage 工具（避免循环依赖）\nconst{notifyLogout}=await import('./postMessage');// 先发送退出登录通知到父页面，自动获取当前页面地址\nnotifyLogout();// 等待一小段时间确保消息发送完成\nawait new Promise(resolve=>setTimeout(resolve,100));// 清除localStorage\nlocalStorage.clear();sessionStorage.clear();// 彻底清除所有相关域名的cookie\nclearAllRelatedCookies(currentDomain,mainDomain);// 确定最终跳转地址\nlet redirectUri;if(currentDomain!==mainDomain){// 当前是子域名，跳转到主域名\nredirectUri=`${window.location.protocol}//${mainDomain}`;}else{// 当前是主域名，跳转到根路径\nredirectUri=`${window.location.protocol}//${currentDomain}/`;}// 构造Casdoor logout URL\nlet casdoorLogoutUrl=`https://casdoor.niceaigc.com/api/logout?post_logout_redirect_uri=${encodeURIComponent(redirectUri)}`;// 如果有cas_access_token，添加id_token_hint参数\nif(casAccessToken){casdoorLogoutUrl+=`&id_token_hint=${encodeURIComponent(casAccessToken)}`;}// 跳转到Casdoor logout接口\nwindow.location.href=casdoorLogoutUrl;};// 获取cookie值\nexport const getCookie=name=>{const value=`; ${document.cookie}`;const parts=value.split(`; ${name}=`);if(parts.length===2){var _parts$pop;return((_parts$pop=parts.pop())===null||_parts$pop===void 0?void 0:_parts$pop.split(';').shift())||null;}return null;};// 检查是否已登录\nexport const isAuthenticated=()=>{const xuserid=getCookie('xuserid');const xtoken=getCookie('xtoken');return!!(xuserid&&xtoken);};","map":{"version":3,"names":["getCurrentDomain","hostname","window","location","parts","split","test","currentDomain","mainDomain","length","slice","join","clearCookiesForDomain","domain","cookies","document","cookie","eqPos","indexOf","name","substr","trim","expireDate","pathname","pathParts","filter","part","currentPath","clearAllRelatedCookies","domainsToClean","push","hostnameParts","i","parentDomain","uniqueDomains","Array","from","Set","console","log","round","forEach","allCookies","cookieName","start","Date","now","logout","casAccessToken","getCookie","notifyLogout","Promise","resolve","setTimeout","localStorage","clear","sessionStorage","redirectUri","protocol","casdoorLogoutUrl","encodeURIComponent","href","value","_parts$pop","pop","shift","isAuthenticated","xuserid","xtoken"],"sources":["/opt/dev/star_share/web/src/utils/cookieUtils.ts"],"sourcesContent":["/**\n * Cookie管理工具函数\n */\n\n// 获取当前域名信息\nconst getCurrentDomain = (): { currentDomain: string; mainDomain: string } => {\n  const hostname = window.location.hostname;\n  const parts = hostname.split('.');\n\n  // 如果是IP地址或localhost，直接返回当前域名\n  if (hostname === 'localhost' || /^\\d+\\.\\d+\\.\\d+\\.\\d+$/.test(hostname)) {\n    return {\n      currentDomain: hostname,\n      mainDomain: hostname\n    };\n  }\n\n  // 获取主域名（最后两个部分，如 yy.com）\n  const mainDomain = parts.length >= 2 ? parts.slice(-2).join('.') : hostname;\n\n  return {\n    currentDomain: hostname,\n    mainDomain: mainDomain\n  };\n};\n\n// 删除指定域名下的所有cookie\nconst clearCookiesForDomain = (domain: string): void => {\n  const cookies = document.cookie.split(';');\n\n  for (let cookie of cookies) {\n    const eqPos = cookie.indexOf('=');\n    const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();\n\n    if (name) {\n      // 尝试多种删除方式，确保彻底清除\n      const expireDate = 'Thu, 01 Jan 1970 00:00:00 GMT';\n\n      // 1. 删除当前域名，根路径\n      document.cookie = `${name}=; expires=${expireDate}; path=/`;\n\n      // 2. 删除当前域名，当前路径\n      document.cookie = `${name}=; expires=${expireDate}; path=${window.location.pathname}`;\n\n      // 3. 删除指定域名，根路径\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=${domain}`;\n\n      // 4. 删除指定域名前缀点，根路径\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=.${domain}`;\n\n      // 5. 删除当前完整域名\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=${window.location.hostname}`;\n\n      // 6. 删除当前完整域名前缀点\n      document.cookie = `${name}=; expires=${expireDate}; path=/; domain=.${window.location.hostname}`;\n\n      // 7. 尝试删除所有可能的路径组合\n      const pathParts = window.location.pathname.split('/').filter(part => part);\n      let currentPath = '';\n      for (const part of pathParts) {\n        currentPath += `/${part}`;\n        document.cookie = `${name}=; expires=${expireDate}; path=${currentPath}`;\n        document.cookie = `${name}=; expires=${expireDate}; path=${currentPath}; domain=${domain}`;\n        document.cookie = `${name}=; expires=${expireDate}; path=${currentPath}; domain=.${domain}`;\n      }\n    }\n  }\n};\n\n// 彻底清除所有相关域名的cookie\nconst clearAllRelatedCookies = (currentDomain: string, mainDomain: string): void => {\n  // 获取所有可能的域名变体\n  const domainsToClean = [\n    currentDomain,\n    mainDomain,\n    window.location.hostname\n  ];\n\n  // 特别处理：确保包含带点前缀的主域名\n  domainsToClean.push(`.${currentDomain}`);\n  domainsToClean.push(`.${mainDomain}`);\n  domainsToClean.push(`.${window.location.hostname}`);\n\n  // 如果是子域名，还要清理父域名\n  const hostnameParts = window.location.hostname.split('.');\n  if (hostnameParts.length > 2) { // 只有当确实是子域名时才处理父域名\n    for (let i = 1; i < hostnameParts.length - 1; i++) { // 避免添加顶级域名如.com\n      const parentDomain = hostnameParts.slice(i).join('.');\n      domainsToClean.push(parentDomain);\n      domainsToClean.push(`.${parentDomain}`);\n    }\n  }\n\n  // 去重\n  const uniqueDomains = Array.from(new Set(domainsToClean));\n\n  console.log('准备清理的域名:', uniqueDomains); // 调试日志\n\n  // 多轮清理，确保彻底\n  for (let round = 0; round < 3; round++) {\n    // 逐个清理每个域名\n    uniqueDomains.forEach(domain => {\n      clearCookiesForDomain(domain);\n    });\n\n    // 额外的彻底清理：直接遍历所有cookie名称进行删除\n    const allCookies = document.cookie.split(';');\n    allCookies.forEach(cookie => {\n      const cookieName = cookie.split('=')[0].trim();\n      if (cookieName) {\n        // 对每个cookie名称尝试所有可能的删除组合\n        uniqueDomains.forEach(domain => {\n          // 基础删除\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}`;\n\n          // 带secure标志的删除\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; secure`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; secure`;\n\n          // 带SameSite的删除\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; SameSite=Strict`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; SameSite=Lax`;\n          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${domain}; SameSite=None; Secure`;\n        });\n      }\n    });\n\n    // 短暂延迟，让浏览器处理删除操作\n    if (round < 2) {\n      // 同步延迟（不推荐但对cookie删除有效）\n      const start = Date.now();\n      while (Date.now() - start < 10) { /* 等待10ms */ }\n    }\n  }\n\n  console.log('清理后剩余cookie:', document.cookie); // 调试日志\n};\n\n// 退出登录功能（简化版）\nexport const logout = async (): Promise<void> => {\n  const { currentDomain, mainDomain } = getCurrentDomain();\n\n  // 在清除cookie之前先获取cas_access_token\n  const casAccessToken = getCookie('cas_access_token');\n\n  // 动态导入 postMessage 工具（避免循环依赖）\n  const { notifyLogout } = await import('./postMessage');\n\n  // 先发送退出登录通知到父页面，自动获取当前页面地址\n  notifyLogout();\n\n  // 等待一小段时间确保消息发送完成\n  await new Promise(resolve => setTimeout(resolve, 100));\n\n  // 清除localStorage\n  localStorage.clear();\n  sessionStorage.clear();\n\n  // 彻底清除所有相关域名的cookie\n  clearAllRelatedCookies(currentDomain, mainDomain);\n\n  // 确定最终跳转地址\n  let redirectUri: string;\n  if (currentDomain !== mainDomain) {\n    // 当前是子域名，跳转到主域名\n    redirectUri = `${window.location.protocol}//${mainDomain}`;\n  } else {\n    // 当前是主域名，跳转到根路径\n    redirectUri = `${window.location.protocol}//${currentDomain}/`;\n  }\n\n  // 构造Casdoor logout URL\n  let casdoorLogoutUrl = `https://casdoor.niceaigc.com/api/logout?post_logout_redirect_uri=${encodeURIComponent(redirectUri)}`;\n\n  // 如果有cas_access_token，添加id_token_hint参数\n  if (casAccessToken) {\n    casdoorLogoutUrl += `&id_token_hint=${encodeURIComponent(casAccessToken)}`;\n  }\n\n  // 跳转到Casdoor logout接口\n  window.location.href = casdoorLogoutUrl;\n};\n\n// 获取cookie值\nexport const getCookie = (name: string): string | null => {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) {\n    return parts.pop()?.split(';').shift() || null;\n  }\n  return null;\n};\n\n// 检查是否已登录\nexport const isAuthenticated = (): boolean => {\n  const xuserid = getCookie('xuserid');\n  const xtoken = getCookie('xtoken');\n  return !!(xuserid && xtoken);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}