{"ast":null,"code":"/**\n * postMessage 通信工具（简化版）\n * 适配外部主网页的简化监听逻辑，无需校验 origin\n * \n * 使用示例：\n * \n * // 1. 基本导航 (跳转到某个页面)\n * postNavigate('https://example.com', true);  // 新窗口打开\n * postNavigate('/dashboard');                 // 当前窗口跳转（默认 false）\n * \n * // 2. 发送退出登录通知\n * notifyLogout(); // 自动获取当前页面地址\n * notifyLogout('/login'); // 手动指定跳转到登录页\n * \n * // 3. 发送自定义消息\n * postMessageToParent({\n *   action: 'custom-action',\n *   data: { userId: 123 }\n * });\n * \n * // 4. 快速退出登录\n * logoutAndNotify(); // 自动获取地址 + 发送通知 + 清除数据 + 跳转\n * \n * 注意：现在所有消息都使用 '*' 作为 targetOrigin，\n * 对应外部主网页的简化监听逻辑（不校验来源）\n */// 简化配置 - 使用 '*' 作为通用目标\nconst DEFAULT_CONFIG={targetOrigins:['*'],// 使用通用目标\ndefaultTargetOrigin:'*'};/**\n * 向父页面发送导航消息（简化版，无需关心 origin）\n * @param url 目标URL\n * @param newWindow 是否在新窗口打开，默认 false\n */export const postNavigate=function(url){let newWindow=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const message={action:'navigate',url:url,newWindow:!!newWindow// 确保是布尔值\n};try{window.parent.postMessage(message,'*');// 使用 '*' 表示任意目标 origin\nconsole.log('[通信] 发送跳转指令:',message);}catch(error){console.error('[通信] 发送跳转指令失败:',error);}};/**\n * 向父页面发送自定义消息（简化版）\n * @param options 消息选项\n */export const postMessageToParent=options=>{try{window.parent.postMessage(options,'*');console.log('[通信] 发送自定义消息:',options);}catch(error){console.error('[通信] 发送自定义消息失败:',error);}};/**\n * 获取退出登录后的目标URL\n * @param strategy 跳转策略\n * @param customUrl 自定义URL\n * @returns 目标URL\n */const getLogoutTargetUrl=function(){let strategy=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'auto';let customUrl=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'/';switch(strategy){case'current':// 跳转到当前完整地址\nreturn window.location.href;case'custom':// 使用自定义URL\nreturn customUrl;case'auto':default:// 自动策略：用户中心跳转到主域名根路径，其他保持当前地址\nconst currentOrigin=window.location.origin;const currentPath=window.location.pathname;if(currentPath.includes('/user-center')){return currentOrigin+'/';}else{return window.location.href;}}};/**\n * 发送退出登录通知（简化版）\n * 直接发送导航消息让主页面跳转到指定URL\n * @param redirectUrl 退出登录后跳转的URL，如果不提供则根据配置策略自动获取\n */export const notifyLogout=redirectUrl=>{let targetUrl=redirectUrl;if(!targetUrl){// 如果没有指定URL，使用配置策略\ntry{// 这里使用同步方式获取配置，避免async问题\nconst config=require('../config');const{strategy,customUrl}=config.postMessage.logoutRedirect;targetUrl=getLogoutTargetUrl(strategy,customUrl);}catch(error){// 如果获取配置失败，使用默认的auto策略\nconsole.warn('[通信] 获取配置失败，使用默认策略:',error);targetUrl=getLogoutTargetUrl('auto','/');}}// 发送导航消息，让主页面跳转\nconst message={action:'navigate',url:targetUrl,newWindow:false};postMessageToParent(message);console.log('[通信] 发送退出登录导航指令:',{from:window.location.href,to:targetUrl,strategy:redirectUrl?'manual':'config'});};/**\n * 获取当前配置（保留兼容性）\n */export const getPostMessageConfig=()=>{return{...DEFAULT_CONFIG};};/**\n * 快速退出登录并通知父页面（简化版）\n * @param redirectUrl 退出登录后跳转的URL，如果不提供则自动获取当前页面地址\n * @example\n * logoutAndNotify(); // 自动获取当前页面地址\n * logoutAndNotify('/login'); // 跳转到登录页\n */export const logoutAndNotify=async redirectUrl=>{// 发送退出登录通知\nnotifyLogout(redirectUrl);// 等待通知发送完成\nawait new Promise(resolve=>setTimeout(resolve,100));// 清除本地数据\nlocalStorage.clear();sessionStorage.clear();// 跳转到首页\nwindow.location.href='/';};","map":{"version":3,"names":["DEFAULT_CONFIG","targetOrigins","defaultTargetOrigin","postNavigate","url","newWindow","arguments","length","undefined","message","action","window","parent","postMessage","console","log","error","postMessageToParent","options","getLogoutTargetUrl","strategy","customUrl","location","href","currentOrigin","origin","currentPath","pathname","includes","notifyLogout","redirectUrl","targetUrl","config","require","logoutRedirect","warn","from","to","getPostMessageConfig","logoutAndNotify","Promise","resolve","setTimeout","localStorage","clear","sessionStorage"],"sources":["/opt/dev/star_share/web/src/utils/postMessage.ts"],"sourcesContent":["/**\n * postMessage 通信工具（简化版）\n * 适配外部主网页的简化监听逻辑，无需校验 origin\n * \n * 使用示例：\n * \n * // 1. 基本导航 (跳转到某个页面)\n * postNavigate('https://example.com', true);  // 新窗口打开\n * postNavigate('/dashboard');                 // 当前窗口跳转（默认 false）\n * \n * // 2. 发送退出登录通知\n * notifyLogout(); // 自动获取当前页面地址\n * notifyLogout('/login'); // 手动指定跳转到登录页\n * \n * // 3. 发送自定义消息\n * postMessageToParent({\n *   action: 'custom-action',\n *   data: { userId: 123 }\n * });\n * \n * // 4. 快速退出登录\n * logoutAndNotify(); // 自动获取地址 + 发送通知 + 清除数据 + 跳转\n * \n * 注意：现在所有消息都使用 '*' 作为 targetOrigin，\n * 对应外部主网页的简化监听逻辑（不校验来源）\n */\n\nexport interface PostMessageOptions {\n    action: string;\n    url?: string;\n    newWindow?: boolean;\n    [key: string]: any;\n}\n\nexport interface PostMessageConfig {\n    targetOrigins: string[];\n    defaultTargetOrigin?: string;\n}\n\n// 简化配置 - 使用 '*' 作为通用目标\nconst DEFAULT_CONFIG: PostMessageConfig = {\n    targetOrigins: ['*'], // 使用通用目标\n    defaultTargetOrigin: '*'\n};\n\n/**\n * 向父页面发送导航消息（简化版，无需关心 origin）\n * @param url 目标URL\n * @param newWindow 是否在新窗口打开，默认 false\n */\nexport const postNavigate = (url: string, newWindow: boolean = false) => {\n    const message: PostMessageOptions = {\n        action: 'navigate',\n        url: url,\n        newWindow: !!newWindow // 确保是布尔值\n    };\n\n    try {\n        window.parent.postMessage(message, '*'); // 使用 '*' 表示任意目标 origin\n        console.log('[通信] 发送跳转指令:', message);\n    } catch (error) {\n        console.error('[通信] 发送跳转指令失败:', error);\n    }\n};\n\n/**\n * 向父页面发送自定义消息（简化版）\n * @param options 消息选项\n */\nexport const postMessageToParent = (options: PostMessageOptions) => {\n    try {\n        window.parent.postMessage(options, '*');\n        console.log('[通信] 发送自定义消息:', options);\n    } catch (error) {\n        console.error('[通信] 发送自定义消息失败:', error);\n    }\n};\n\n/**\n * 获取退出登录后的目标URL\n * @param strategy 跳转策略\n * @param customUrl 自定义URL\n * @returns 目标URL\n */\nconst getLogoutTargetUrl = (strategy: string = 'auto', customUrl: string = '/') => {\n    switch (strategy) {\n        case 'current':\n            // 跳转到当前完整地址\n            return window.location.href;\n\n        case 'custom':\n            // 使用自定义URL\n            return customUrl;\n\n        case 'auto':\n        default:\n            // 自动策略：用户中心跳转到主域名根路径，其他保持当前地址\n            const currentOrigin = window.location.origin;\n            const currentPath = window.location.pathname;\n\n            if (currentPath.includes('/user-center')) {\n                return currentOrigin + '/';\n            } else {\n                return window.location.href;\n            }\n    }\n};\n\n/**\n * 发送退出登录通知（简化版）\n * 直接发送导航消息让主页面跳转到指定URL\n * @param redirectUrl 退出登录后跳转的URL，如果不提供则根据配置策略自动获取\n */\nexport const notifyLogout = (redirectUrl?: string) => {\n    let targetUrl = redirectUrl;\n\n    if (!targetUrl) {\n        // 如果没有指定URL，使用配置策略\n        try {\n            // 这里使用同步方式获取配置，避免async问题\n            const config = require('../config');\n            const { strategy, customUrl } = config.postMessage.logoutRedirect;\n            targetUrl = getLogoutTargetUrl(strategy, customUrl);\n        } catch (error) {\n            // 如果获取配置失败，使用默认的auto策略\n            console.warn('[通信] 获取配置失败，使用默认策略:', error);\n            targetUrl = getLogoutTargetUrl('auto', '/');\n        }\n    }\n\n    // 发送导航消息，让主页面跳转\n    const message: PostMessageOptions = {\n        action: 'navigate',\n        url: targetUrl,\n        newWindow: false\n    };\n\n    postMessageToParent(message);\n    console.log('[通信] 发送退出登录导航指令:', {\n        from: window.location.href,\n        to: targetUrl,\n        strategy: redirectUrl ? 'manual' : 'config'\n    });\n};\n\n/**\n * 获取当前配置（保留兼容性）\n */\nexport const getPostMessageConfig = (): PostMessageConfig => {\n    return { ...DEFAULT_CONFIG };\n};\n\n/**\n * 快速退出登录并通知父页面（简化版）\n * @param redirectUrl 退出登录后跳转的URL，如果不提供则自动获取当前页面地址\n * @example\n * logoutAndNotify(); // 自动获取当前页面地址\n * logoutAndNotify('/login'); // 跳转到登录页\n */\nexport const logoutAndNotify = async (redirectUrl?: string) => {\n    // 发送退出登录通知\n    notifyLogout(redirectUrl);\n\n    // 等待通知发送完成\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // 清除本地数据\n    localStorage.clear();\n    sessionStorage.clear();\n\n    // 跳转到首页\n    window.location.href = '/';\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}