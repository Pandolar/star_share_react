{"ast":null,"code":"/**\n * 用户认证状态检查Hook\n * 检查cookie中的xuserid和xtoken，以及接口返回的code\n */import{useEffect,useState,useCallback}from'react';import{useNavigate}from'react-router-dom';import{showMessage}from'../utils/toast';export const useAuthCheck=function(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const{checkOnMount=true,showCountdown=true,countdownSeconds=3}=options;const navigate=useNavigate();const[isChecking,setIsChecking]=useState(false);const[isAuthenticated,setIsAuthenticated]=useState(true);const[countdown,setCountdown]=useState(0);// 检查cookie中的认证信息\nconst checkCookieAuth=useCallback(()=>{var _document$cookie$spli,_document$cookie$spli2;const xuserid=(_document$cookie$spli=document.cookie.split('; ').find(row=>row.startsWith('xuserid=')))===null||_document$cookie$spli===void 0?void 0:_document$cookie$spli.split('=')[1];const xtoken=(_document$cookie$spli2=document.cookie.split('; ').find(row=>row.startsWith('xtoken=')))===null||_document$cookie$spli2===void 0?void 0:_document$cookie$spli2.split('=')[1];return!!(xuserid&&xtoken);},[]);// 处理认证失败\nconst handleAuthFailure=useCallback(function(){let message=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'登录状态已过期，请重新登录';setIsAuthenticated(false);if(showCountdown){let timeLeft=countdownSeconds;setCountdown(timeLeft);// 显示初始提示，持续时间设为倒计时时长，确保用户能看到完整提示\nshowMessage.warning(`${message}，${timeLeft}秒后将返回首页`);const timer=setInterval(()=>{timeLeft-=1;setCountdown(timeLeft);if(timeLeft<=0){clearInterval(timer);navigate('/',{replace:true});}// 移除每秒的重复提示，只在页面上显示倒计时\n},1000);return()=>clearInterval(timer);}else{showMessage.error(message);navigate('/',{replace:true});}},[navigate,showCountdown,countdownSeconds]);// 检查接口响应的code\nconst checkApiResponse=useCallback(response=>{if(response&&response.code!==undefined&&response.code!==20000){handleAuthFailure('接口返回错误，请重新登录');return false;}return true;},[handleAuthFailure]);// 执行完整的认证检查\nconst performAuthCheck=useCallback(async()=>{setIsChecking(true);try{// 检查cookie\nif(!checkCookieAuth()){handleAuthFailure('未找到登录凭证');return false;}setIsAuthenticated(true);return true;}catch(error){handleAuthFailure('认证检查失败');return false;}finally{setIsChecking(false);}},[checkCookieAuth,handleAuthFailure]);// 组件挂载时检查认证状态\nuseEffect(()=>{if(checkOnMount){performAuthCheck();}},[checkOnMount,performAuthCheck]);return{isAuthenticated,isChecking,countdown,checkCookieAuth,checkApiResponse,performAuthCheck,handleAuthFailure};};","map":{"version":3,"names":["useEffect","useState","useCallback","useNavigate","showMessage","useAuthCheck","options","arguments","length","undefined","checkOnMount","showCountdown","countdownSeconds","navigate","isChecking","setIsChecking","isAuthenticated","setIsAuthenticated","countdown","setCountdown","checkCookieAuth","_document$cookie$spli","_document$cookie$spli2","xuserid","document","cookie","split","find","row","startsWith","xtoken","handleAuthFailure","message","timeLeft","warning","timer","setInterval","clearInterval","replace","error","checkApiResponse","response","code","performAuthCheck"],"sources":["/opt/dev/star_share/web/src/hooks/useAuthCheck.ts"],"sourcesContent":["/**\n * 用户认证状态检查Hook\n * 检查cookie中的xuserid和xtoken，以及接口返回的code\n */\nimport { useEffect, useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { showMessage } from '../utils/toast';\n\ninterface AuthCheckOptions {\n    // 是否在组件挂载时立即检查\n    checkOnMount?: boolean;\n    // 检查失败时是否显示倒计时\n    showCountdown?: boolean;\n    // 倒计时秒数\n    countdownSeconds?: number;\n}\n\nexport const useAuthCheck = (options: AuthCheckOptions = {}) => {\n    const {\n        checkOnMount = true,\n        showCountdown = true,\n        countdownSeconds = 3\n    } = options;\n\n    const navigate = useNavigate();\n    const [isChecking, setIsChecking] = useState(false);\n    const [isAuthenticated, setIsAuthenticated] = useState(true);\n    const [countdown, setCountdown] = useState(0);\n\n    // 检查cookie中的认证信息\n    const checkCookieAuth = useCallback((): boolean => {\n        const xuserid = document.cookie\n            .split('; ')\n            .find(row => row.startsWith('xuserid='))\n            ?.split('=')[1];\n\n        const xtoken = document.cookie\n            .split('; ')\n            .find(row => row.startsWith('xtoken='))\n            ?.split('=')[1];\n\n        return !!(xuserid && xtoken);\n    }, []);\n\n    // 处理认证失败\n    const handleAuthFailure = useCallback((message: string = '登录状态已过期，请重新登录') => {\n        setIsAuthenticated(false);\n\n        if (showCountdown) {\n            let timeLeft = countdownSeconds;\n            setCountdown(timeLeft);\n\n            // 显示初始提示，持续时间设为倒计时时长，确保用户能看到完整提示\n            showMessage.warning(`${message}，${timeLeft}秒后将返回首页`);\n\n            const timer = setInterval(() => {\n                timeLeft -= 1;\n                setCountdown(timeLeft);\n\n                if (timeLeft <= 0) {\n                    clearInterval(timer);\n                    navigate('/', { replace: true });\n                }\n                // 移除每秒的重复提示，只在页面上显示倒计时\n            }, 1000);\n\n            return () => clearInterval(timer);\n        } else {\n            showMessage.error(message);\n            navigate('/', { replace: true });\n        }\n    }, [navigate, showCountdown, countdownSeconds]);\n\n    // 检查接口响应的code\n    const checkApiResponse = useCallback((response: any): boolean => {\n        if (response && response.code !== undefined && response.code !== 20000) {\n            handleAuthFailure('接口返回错误，请重新登录');\n            return false;\n        }\n        return true;\n    }, [handleAuthFailure]);\n\n    // 执行完整的认证检查\n    const performAuthCheck = useCallback(async (): Promise<boolean> => {\n        setIsChecking(true);\n\n        try {\n            // 检查cookie\n            if (!checkCookieAuth()) {\n                handleAuthFailure('未找到登录凭证');\n                return false;\n            }\n\n            setIsAuthenticated(true);\n            return true;\n        } catch (error) {\n            handleAuthFailure('认证检查失败');\n            return false;\n        } finally {\n            setIsChecking(false);\n        }\n    }, [checkCookieAuth, handleAuthFailure]);\n\n    // 组件挂载时检查认证状态\n    useEffect(() => {\n        if (checkOnMount) {\n            performAuthCheck();\n        }\n    }, [checkOnMount, performAuthCheck]);\n\n    return {\n        isAuthenticated,\n        isChecking,\n        countdown,\n        checkCookieAuth,\n        checkApiResponse,\n        performAuthCheck,\n        handleAuthFailure\n    };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}